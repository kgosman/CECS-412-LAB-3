
TinyOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000026a  00800100  00000e74  00000f08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e74  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  0080036a  0080036a  00001172  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001172  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000011a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  000011e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013aa  00000000  00000000  00001290  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a54  00000000  00000000  0000263a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bbc  00000000  00000000  0000308e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000017c  00000000  00000000  00003c4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000586  00000000  00000000  00003dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000380  00000000  00000000  0000434e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  000046ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 87 00 	jmp	0x10e	; 0x10e <__ctors_end>
   4:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
   8:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
   c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  10:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  14:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  18:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  1c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  20:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  24:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  28:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  2c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  30:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  34:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  38:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  3c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  40:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  44:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  48:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  4c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  50:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  54:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  58:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  5c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  60:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  64:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  68:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  6c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  70:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  74:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  78:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  7c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  80:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  84:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  88:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  8c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  90:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  94:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  98:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  9c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  a0:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  a4:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  a8:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  ac:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  b0:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  b4:	08 00       	.word	0x0008	; ????
  b6:	00 00       	nop
  b8:	be 92       	st	-X, r11
  ba:	24 49       	sbci	r18, 0x94	; 148
  bc:	12 3e       	cpi	r17, 0xE2	; 226
  be:	ab aa       	std	Y+51, r10	; 0x33
  c0:	aa 2a       	or	r10, r26
  c2:	be cd       	rjmp	.-1156   	; 0xfffffc40 <__eeprom_end+0xff7efc40>
  c4:	cc cc       	rjmp	.-1640   	; 0xfffffa5e <__eeprom_end+0xff7efa5e>
  c6:	4c 3e       	cpi	r20, 0xEC	; 236
  c8:	00 00       	nop
  ca:	00 80       	ld	r0, Z
  cc:	be ab       	std	Y+54, r27	; 0x36
  ce:	aa aa       	std	Y+50, r10	; 0x32
  d0:	aa 3e       	cpi	r26, 0xEA	; 234
  d2:	00 00       	nop
  d4:	00 00       	nop
  d6:	bf 00       	.word	0x00bf	; ????
  d8:	00 00       	nop
  da:	80 3f       	cpi	r24, 0xF0	; 240
  dc:	00 00       	nop
  de:	00 00       	nop
  e0:	00 08       	sbc	r0, r0
  e2:	41 78       	andi	r20, 0x81	; 129
  e4:	d3 bb       	out	0x13, r29	; 19
  e6:	43 87       	std	Z+11, r20	; 0x0b
  e8:	d1 13       	cpse	r29, r17
  ea:	3d 19       	sub	r19, r13
  ec:	0e 3c       	cpi	r16, 0xCE	; 206
  ee:	c3 bd       	out	0x23, r28	; 35
  f0:	42 82       	std	Z+2, r4	; 0x02
  f2:	ad 2b       	or	r26, r29
  f4:	3e 68       	ori	r19, 0x8E	; 142
  f6:	ec 82       	std	Y+4, r14	; 0x04
  f8:	76 be       	out	0x36, r7	; 54
  fa:	d9 8f       	std	Y+25, r29	; 0x19
  fc:	e1 a9       	ldd	r30, Z+49	; 0x31
  fe:	3e 4c       	sbci	r19, 0xCE	; 206
 100:	80 ef       	ldi	r24, 0xF0	; 240
 102:	ff be       	out	0x3f, r15	; 63
 104:	01 c4       	rjmp	.+2050   	; 0x908 <__stack+0x9>
 106:	ff 7f       	andi	r31, 0xFF	; 255
 108:	3f 00       	.word	0x003f	; ????
 10a:	00 00       	nop
	...

0000010e <__ctors_end>:
 10e:	11 24       	eor	r1, r1
 110:	1f be       	out	0x3f, r1	; 63
 112:	cf ef       	ldi	r28, 0xFF	; 255
 114:	d8 e0       	ldi	r29, 0x08	; 8
 116:	de bf       	out	0x3e, r29	; 62
 118:	cd bf       	out	0x3d, r28	; 61

0000011a <__do_copy_data>:
 11a:	13 e0       	ldi	r17, 0x03	; 3
 11c:	a0 e0       	ldi	r26, 0x00	; 0
 11e:	b1 e0       	ldi	r27, 0x01	; 1
 120:	e4 e7       	ldi	r30, 0x74	; 116
 122:	fe e0       	ldi	r31, 0x0E	; 14
 124:	02 c0       	rjmp	.+4      	; 0x12a <__do_copy_data+0x10>
 126:	05 90       	lpm	r0, Z+
 128:	0d 92       	st	X+, r0
 12a:	aa 36       	cpi	r26, 0x6A	; 106
 12c:	b1 07       	cpc	r27, r17
 12e:	d9 f7       	brne	.-10     	; 0x126 <__do_copy_data+0xc>

00000130 <__do_clear_bss>:
 130:	23 e0       	ldi	r18, 0x03	; 3
 132:	aa e6       	ldi	r26, 0x6A	; 106
 134:	b3 e0       	ldi	r27, 0x03	; 3
 136:	01 c0       	rjmp	.+2      	; 0x13a <.do_clear_bss_start>

00000138 <.do_clear_bss_loop>:
 138:	1d 92       	st	X+, r1

0000013a <.do_clear_bss_start>:
 13a:	ac 37       	cpi	r26, 0x7C	; 124
 13c:	b2 07       	cpc	r27, r18
 13e:	e1 f7       	brne	.-8      	; 0x138 <.do_clear_bss_loop>
 140:	0e 94 74 04 	call	0x8e8	; 0x8e8 <main>
 144:	0c 94 38 07 	jmp	0xe70	; 0xe70 <_exit>

00000148 <__bad_interrupt>:
 148:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000014c <Mega328P_Init>:
.section ".text"			//student comment here

//Mo
.global Mega328P_Init
Mega328P_Init:
		ldi	r16,0x07		;PB0(R*W),PB1(RS),PB2(E) as fixed outputs
 14c:	07 e0       	ldi	r16, 0x07	; 7
		out	DDRB,r16		//student comment here
 14e:	04 b9       	out	0x04, r16	; 4
		ldi	r16,0			//student comment here
 150:	00 e0       	ldi	r16, 0x00	; 0
		out	PORTB,r16		//student comment here
 152:	05 b9       	out	0x05, r16	; 5
		out	U2X0,r16		;initialize UART, 8bits, no parity, 1 stop, 9600
 154:	01 b9       	out	0x01, r16	; 1
		ldi	r17,0x0			//student comment here
 156:	10 e0       	ldi	r17, 0x00	; 0
		ldi	r16,0x67		//student comment here
 158:	07 e6       	ldi	r16, 0x67	; 103
		sts	UBRR0H,r17		//student comment here
 15a:	10 93 c5 00 	sts	0x00C5, r17	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
		sts	UBRR0L,r16		//student comment here
 15e:	00 93 c4 00 	sts	0x00C4, r16	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
		ldi	r16,24			//student comment here
 162:	08 e1       	ldi	r16, 0x18	; 24
		sts	UCSR0B,r16		//student comment here
 164:	00 93 c1 00 	sts	0x00C1, r16	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
		ldi	r16,6			//student comment here
 168:	06 e0       	ldi	r16, 0x06	; 6
		sts	UCSR0C,r16		//student comment here
 16a:	00 93 c2 00 	sts	0x00C2, r16	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
		ldi r16,0x87		//initialize ADC
 16e:	07 e8       	ldi	r16, 0x87	; 135
		sts	ADCSRA,r16		//student comment here
 170:	00 93 7a 00 	sts	0x007A, r16	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
		ldi r16,0x40		//student comment here
 174:	00 e4       	ldi	r16, 0x40	; 64
		sts ADMUX,r16		//student comment here
 176:	00 93 7c 00 	sts	0x007C, r16	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
		ldi r16,0			//student comment here
 17a:	00 e0       	ldi	r16, 0x00	; 0
		sts ADCSRB,r16		//student comment here
 17c:	00 93 7b 00 	sts	0x007B, r16	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
		ldi r16,0xFE		//student comment here
 180:	0e ef       	ldi	r16, 0xFE	; 254
		sts DIDR0,r16		//student comment here
 182:	00 93 7e 00 	sts	0x007E, r16	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
		ldi r16,0xFF		//student comment here
 186:	0f ef       	ldi	r16, 0xFF	; 255
		sts DIDR1,r16		//student comment here
 188:	00 93 7f 00 	sts	0x007F, r16	; 0x80007f <__TEXT_REGION_LENGTH__+0x7e007f>
		ret					//student comment here
 18c:	08 95       	ret

0000018e <LCD_Write_Command>:
	
//Kaden
.global LCD_Write_Command
LCD_Write_Command:
	call	UART_Off		//student comment here
 18e:	0e 94 04 01 	call	0x208	; 0x208 <UART_Off>
	ldi		r16,0xFF		;PD0 - PD7 as outputs
 192:	0f ef       	ldi	r16, 0xFF	; 255
	out		DDRD,r16		//student comment here
 194:	0a b9       	out	0x0a, r16	; 10
	lds		r16,DATA		//student comment here
 196:	00 91 6c 03 	lds	r16, 0x036C	; 0x80036c <DATA>
	out		PORTD,r16		//student comment here
 19a:	0b b9       	out	0x0b, r16	; 11
	ldi		r16,4			//student comment here
 19c:	04 e0       	ldi	r16, 0x04	; 4
	out		PORTB,r16		//student comment here
 19e:	05 b9       	out	0x05, r16	; 5
	call	LCD_Delay		//student comment here
 1a0:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_Delay>
	ldi		r16,0			//student comment here
 1a4:	00 e0       	ldi	r16, 0x00	; 0
	out		PORTB,r16		//student comment here
 1a6:	05 b9       	out	0x05, r16	; 5
	call	LCD_Delay		//student comment here
 1a8:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_Delay>
	call	UART_On			//student comment here
 1ac:	0e 94 fe 00 	call	0x1fc	; 0x1fc <UART_On>
	ret						//student comment here
 1b0:	08 95       	ret

000001b2 <LCD_Delay>:

.global LCD_Delay
LCD_Delay:
	ldi		r16,0xFA		//student comment here
 1b2:	0a ef       	ldi	r16, 0xFA	; 250

000001b4 <D0>:
D0:	ldi		r17,0xFF		//student comment here
 1b4:	1f ef       	ldi	r17, 0xFF	; 255

000001b6 <D1>:
D1:	dec		r17				//student comment here
 1b6:	1a 95       	dec	r17
	brne	D1				//student comment here
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <D1>
	dec		r16				//student comment here
 1ba:	0a 95       	dec	r16
	brne	D0				//student comment here
 1bc:	d9 f7       	brne	.-10     	; 0x1b4 <D0>
	ret						//student comment here
 1be:	08 95       	ret

000001c0 <LCD_Write_Data>:

.global LCD_Write_Data
LCD_Write_Data:
	call	UART_Off		//student comment here
 1c0:	0e 94 04 01 	call	0x208	; 0x208 <UART_Off>
	ldi		r16,0xFF		//student comment here
 1c4:	0f ef       	ldi	r16, 0xFF	; 255
	out		DDRD,r16		//student comment here
 1c6:	0a b9       	out	0x0a, r16	; 10
	lds		r16,DATA		//student comment here
 1c8:	00 91 6c 03 	lds	r16, 0x036C	; 0x80036c <DATA>
	out		PORTD,r16		//student comment here
 1cc:	0b b9       	out	0x0b, r16	; 11
	ldi		r16,6			//student comment here
 1ce:	06 e0       	ldi	r16, 0x06	; 6
	out		PORTB,r16		//student comment here
 1d0:	05 b9       	out	0x05, r16	; 5
	call	LCD_Delay		//student comment here
 1d2:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_Delay>
	ldi		r16,0			//student comment here
 1d6:	00 e0       	ldi	r16, 0x00	; 0
	out		PORTB,r16		//student comment here
 1d8:	05 b9       	out	0x05, r16	; 5
	call	LCD_Delay		//student comment here
 1da:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_Delay>
	call	UART_On			//student comment here
 1de:	0e 94 fe 00 	call	0x1fc	; 0x1fc <UART_On>
	ret						//student comment here
 1e2:	08 95       	ret

000001e4 <LCD_Read_Data>:

.global LCD_Read_Data
LCD_Read_Data:
	call	UART_Off		//student comment here
 1e4:	0e 94 04 01 	call	0x208	; 0x208 <UART_Off>
	ldi		r16,0x00		//student comment here
 1e8:	00 e0       	ldi	r16, 0x00	; 0
	out		DDRD,r16		//student comment here
 1ea:	0a b9       	out	0x0a, r16	; 10
	out		PORTB,4			//student comment here
 1ec:	45 b8       	out	0x05, r4	; 5
	in		r16,PORTD		//student comment here
 1ee:	0b b1       	in	r16, 0x0b	; 11
	sts		DATA,r16		//student comment here
 1f0:	00 93 6c 03 	sts	0x036C, r16	; 0x80036c <DATA>
	out		PORTB,0			//student comment here
 1f4:	05 b8       	out	0x05, r0	; 5
	call	UART_On			//student comment here
 1f6:	0e 94 fe 00 	call	0x1fc	; 0x1fc <UART_On>
	ret						//student comment here
 1fa:	08 95       	ret

000001fc <UART_On>:

//Austin
.global UART_On
UART_On:
	ldi		r16,2				//student comment here
 1fc:	02 e0       	ldi	r16, 0x02	; 2
	out		DDRD,r16			//set data direction register to 00000010
 1fe:	0a b9       	out	0x0a, r16	; 10
	ldi		r16,24				
 200:	08 e1       	ldi	r16, 0x18	; 24
	sts		UCSR0B,r16			//Enables UART reciever and transmitter
 202:	00 93 c1 00 	sts	0x00C1, r16	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	ret						
 206:	08 95       	ret

00000208 <UART_Off>:

.global UART_Off
UART_Off:
	ldi	r16,0					
 208:	00 e0       	ldi	r16, 0x00	; 0
	sts UCSR0B,r16				//disables reciever and transmitter
 20a:	00 93 c1 00 	sts	0x00C1, r16	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	ret					
 20e:	08 95       	ret

00000210 <UART_Clear>:

.global UART_Clear
UART_Clear:
	lds		r16,UCSR0A			//recives register status from UART
 210:	00 91 c0 00 	lds	r16, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	sbrs	r16,RXC0			//skips next line if data was recieved
 214:	07 ff       	sbrs	r16, 7
	ret							
 216:	08 95       	ret
	lds		r16,UDR0			//puts data into register, clears memory address
 218:	00 91 c6 00 	lds	r16, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	rjmp	UART_Clear			//jumps back to begining
 21c:	f9 cf       	rjmp	.-14     	; 0x210 <UART_Clear>

0000021e <UART_Get>:

.global UART_Get
UART_Get:
	lds		r16,UCSR0A			//recives register status from UART
 21e:	00 91 c0 00 	lds	r16, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	sbrs	r16,RXC0			//skips next line if data was recieved
 222:	07 ff       	sbrs	r16, 7
	rjmp	UART_Get			//jumps back if data was not recieved
 224:	fc cf       	rjmp	.-8      	; 0x21e <UART_Get>
	lds		r16,UDR0			//recives data 
 226:	00 91 c6 00 	lds	r16, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	sts		ASCII,r16			//puts data into ASCII
 22a:	00 93 70 03 	sts	0x0370, r16	; 0x800370 <ASCII>
	ret							
 22e:	08 95       	ret

00000230 <UART_Put>:

.global UART_Put
UART_Put:
	lds		r17,UCSR0A			//recives register status from UART
 230:	10 91 c0 00 	lds	r17, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	sbrs	r17,UDRE0			//skips next line if UART not in transmitting mode
 234:	15 ff       	sbrs	r17, 5
	rjmp	UART_Put
 236:	fc cf       	rjmp	.-8      	; 0x230 <UART_Put>
	lds		r16,ASCII			//recieves put data
 238:	00 91 70 03 	lds	r16, 0x0370	; 0x800370 <ASCII>
	sts		UDR0,r16			//outputs data
 23c:	00 93 c6 00 	sts	0x00C6, r16	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	ret	
 240:	08 95       	ret

00000242 <ADC_Get>:

//Mason
.global ADC_Get
ADC_Get:
		ldi	r16,0xC7			//Sets 0xC7 to register 16 to be loaded into address ADCSRA  
 242:	07 ec       	ldi	r16, 0xC7	; 199
		sts	ADCSRA,r16			//r16 is stored to address ADSRA for use in loop
 244:	00 93 7a 00 	sts	0x007A, r16	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

00000248 <A2V1>:
A2V1:	        lds	r16,ADCSRA		        //loads value stored in ADSRA to r16 a reset of the value
 248:	00 91 7a 00 	lds	r16, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
		sbrc	r16,ADSC			//If the bit in r16 is cleared skips the next instruction, this will end the loop
 24c:	06 fd       	sbrc	r16, 6
	rjmp 	A2V1				//Jumps back to A2V1 to create loop 
 24e:	fc cf       	rjmp	.-8      	; 0x248 <A2V1>
	lds	r16,ADCL			//The low value of the ADC port is stored in r16
 250:	00 91 78 00 	lds	r16, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
		sts	LADC,r16			//Then the value of ADCL is loaded into a global address to be used in C program
 254:	00 93 77 03 	sts	0x0377, r16	; 0x800377 <LADC>
		lds	r16,ADCH			//The high value of the ADC port is stored in r16
 258:	00 91 79 00 	lds	r16, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
		sts	HADC,r16			//Then stored to the global address HADC to be used in C program
 25c:	00 93 6d 03 	sts	0x036D, r16	; 0x80036d <HADC>
		ret					//Returns to the section where call was made
 260:	08 95       	ret

00000262 <EEPROM_Write>:

.global EEPROM_Write
EEPROM_Write:      
		sbic    EECR,EEPE
 262:	f9 99       	sbic	0x1f, 1	; 31
		rjmp    EEPROM_Write		; Wait for completion of previous write
 264:	fe cf       	rjmp	.-4      	; 0x262 <EEPROM_Write>
		lds		r18,EELOCH			; Set up address (r18:r17) in address register
 266:	20 91 00 00 	lds	r18, 0x0000	; 0x800000 <__TEXT_REGION_LENGTH__+0x7e0000>
		lds		r17,EELOCL 
 26a:	10 91 00 00 	lds	r17, 0x0000	; 0x800000 <__TEXT_REGION_LENGTH__+0x7e0000>
		ldi		r16,'F'				; Set up data in r16    
 26e:	06 e4       	ldi	r16, 0x46	; 70
		out     EEARH, r18      
 270:	22 bd       	out	0x22, r18	; 34
		out     EEARL, r17			      
 272:	11 bd       	out	0x21, r17	; 33
		out     EEDR,r16			; Write data (r16) to Data Register  
 274:	00 bd       	out	0x20, r16	; 32
		sbi     EECR,EEMPE			; Write logical one to EEMPE
 276:	fa 9a       	sbi	0x1f, 2	; 31
		sbi     EECR,EEPE			; Start eeprom write by setting EEPE
 278:	f9 9a       	sbi	0x1f, 1	; 31
		ret 
 27a:	08 95       	ret

0000027c <EEPROM_Read>:

.global EEPROM_Read
EEPROM_Read:					    
		sbic    EECR,EEPE    
 27c:	f9 99       	sbic	0x1f, 1	; 31
		rjmp    EEPROM_Read		; Wait for completion of previous write
 27e:	fe cf       	rjmp	.-4      	; 0x27c <EEPROM_Read>
		lds		r18,EELOCH		; Set up address (r18:r17) in EEPROM address register
 280:	20 91 00 00 	lds	r18, 0x0000	; 0x800000 <__TEXT_REGION_LENGTH__+0x7e0000>
		lds		r17,EELOCL
 284:	10 91 00 00 	lds	r17, 0x0000	; 0x800000 <__TEXT_REGION_LENGTH__+0x7e0000>
		ldi		r16,0x00   
 288:	00 e0       	ldi	r16, 0x00	; 0
		out     EEARH, r18   
 28a:	22 bd       	out	0x22, r18	; 34
		out     EEARL, r17		   
 28c:	11 bd       	out	0x21, r17	; 33
		sbi     EECR,EERE		; Start eeprom read by writing EERE
 28e:	f8 9a       	sbi	0x1f, 0	; 31
		in      r16,EEDR		; Read data from Data Register
 290:	00 b5       	in	r16, 0x20	; 32
		sts		ASCII,r16  
 292:	00 93 70 03 	sts	0x0370, r16	; 0x800370 <ASCII>
		ret
 296:	08 95       	ret

00000298 <EEMEMORYH>:

.global EEMEMORYH
EEMEMORYH:
		lds	r16, EELOCH
 298:	00 91 00 00 	lds	r16, 0x0000	; 0x800000 <__TEXT_REGION_LENGTH__+0x7e0000>
		lds	r17, DATA
 29c:	10 91 6c 03 	lds	r17, 0x036C	; 0x80036c <DATA>
		add	r16, r17
 2a0:	01 0f       	add	r16, r17
		sts	EELOCH, r16
 2a2:	00 93 00 00 	sts	0x0000, r16	; 0x800000 <__TEXT_REGION_LENGTH__+0x7e0000>
		ret
 2a6:	08 95       	ret

000002a8 <EEMEMORYL>:

.global EEMEMORYL
EEMEMORYL:
		lds	r16, EELOCL
 2a8:	00 91 00 00 	lds	r16, 0x0000	; 0x800000 <__TEXT_REGION_LENGTH__+0x7e0000>
		lds	r17, DATA
 2ac:	10 91 6c 03 	lds	r17, 0x036C	; 0x80036c <DATA>
		add	r16, r17
 2b0:	01 0f       	add	r16, r17
		sts	EELOCL, r16
 2b2:	00 93 00 00 	sts	0x0000, r16	; 0x800000 <__TEXT_REGION_LENGTH__+0x7e0000>
		ret
 2b6:	08 95       	ret

000002b8 <EEMEMORYR>:
			
.global EEMEMORYR
EEMEMORYR:
		ldi	r16, 0
 2b8:	00 e0       	ldi	r16, 0x00	; 0
		sts	EELOCH, r16
 2ba:	00 93 00 00 	sts	0x0000, r16	; 0x800000 <__TEXT_REGION_LENGTH__+0x7e0000>
		sts EELOCL, r16
 2be:	00 93 00 00 	sts	0x0000, r16	; 0x800000 <__TEXT_REGION_LENGTH__+0x7e0000>
		ret
 2c2:	08 95       	ret

000002c4 <SETC>:

.global SETC
SETC: 
		lds		r16, UCSR0C
 2c4:	00 91 c2 00 	lds	r16, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
		lds		r17, USARTDATA
 2c8:	10 91 6a 03 	lds	r17, 0x036A	; 0x80036a <__data_end>
		or		r16, r17
 2cc:	01 2b       	or	r16, r17
		sts		UCSR0C, r16
 2ce:	00 93 c2 00 	sts	0x00C2, r16	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
		ret		
 2d2:	08 95       	ret

000002d4 <CLEARC>:

.global CLEARC
CLEARC: 
		lds		r16, UCSR0C
 2d4:	00 91 c2 00 	lds	r16, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
		ldi		r17, 0xFF
 2d8:	1f ef       	ldi	r17, 0xFF	; 255
		lds		r18, USARTDATA
 2da:	20 91 6a 03 	lds	r18, 0x036A	; 0x80036a <__data_end>
		sub		r17, r18
 2de:	12 1b       	sub	r17, r18
		and		r16, r17
 2e0:	01 23       	and	r16, r17
		sts		UCSR0C, r16
 2e2:	00 93 c2 00 	sts	0x00C2, r16	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
		ret
 2e6:	08 95       	ret

000002e8 <SETB>:

.global SETB
SETB: 
		lds		r16, UCSR0B
 2e8:	00 91 c1 00 	lds	r16, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
		ldi		r17, 0xFF
 2ec:	1f ef       	ldi	r17, 0xFF	; 255
		lds		r18, USARTDATA
 2ee:	20 91 6a 03 	lds	r18, 0x036A	; 0x80036a <__data_end>
		sub		r17, r18
 2f2:	12 1b       	sub	r17, r18
		and		r16, r17
 2f4:	01 23       	and	r16, r17
		sts		UCSR0B, r16
 2f6:	00 93 c1 00 	sts	0x00C1, r16	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
		ret
 2fa:	08 95       	ret

000002fc <CLEARB>:

.global CLEARB
CLEARB:
		lds		r16, UCSR0B
 2fc:	00 91 c1 00 	lds	r16, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
		lds		r17, USARTDATA
 300:	10 91 6a 03 	lds	r17, 0x036A	; 0x80036a <__data_end>
		or		r16, r17
 304:	01 2b       	or	r16, r17
		sts		UCSR0B, r16
 306:	00 93 c1 00 	sts	0x00C1, r16	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
		ret
 30a:	08 95       	ret

0000030c <SETBAUD>:

.global SETBAUD
SETBAUD:
		lds		r16, BAUDL
 30c:	00 91 7a 03 	lds	r16, 0x037A	; 0x80037a <BAUDL>
		lds		r17, BAUDH
 310:	10 91 6e 03 	lds	r17, 0x036E	; 0x80036e <BAUDH>
		sts		UBRR0L,r16
 314:	00 93 c4 00 	sts	0x00C4, r16	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
		sts		UBRR0H,r17
 318:	10 93 c5 00 	sts	0x00C5, r17	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
		ret
 31c:	08 95       	ret

0000031e <UART_Puts>:

char volts[6];					//string buffer for ADC output
int Acc;						//Accumulator for ADC use

void UART_Puts(const char *str)	//Display a string in the PC Terminal Program
{
 31e:	cf 93       	push	r28
 320:	df 93       	push	r29
 322:	ec 01       	movw	r28, r24
	while (*str)
 324:	98 81       	ld	r25, Y
 326:	99 23       	and	r25, r25
 328:	41 f0       	breq	.+16     	; 0x33a <UART_Puts+0x1c>
 32a:	21 96       	adiw	r28, 0x01	; 1
	{
		ASCII = *str++;
 32c:	90 93 70 03 	sts	0x0370, r25	; 0x800370 <ASCII>
		UART_Put();
 330:	0e 94 18 01 	call	0x230	; 0x230 <UART_Put>
char volts[6];					//string buffer for ADC output
int Acc;						//Accumulator for ADC use

void UART_Puts(const char *str)	//Display a string in the PC Terminal Program
{
	while (*str)
 334:	99 91       	ld	r25, Y+
 336:	91 11       	cpse	r25, r1
 338:	f9 cf       	rjmp	.-14     	; 0x32c <UART_Puts+0xe>
	{
		ASCII = *str++;
		UART_Put();
	}
}
 33a:	df 91       	pop	r29
 33c:	cf 91       	pop	r28
 33e:	08 95       	ret

00000340 <LCD_Puts>:

void LCD_Puts(const char *str)	//Display a string on the LCD Module
{
 340:	cf 93       	push	r28
 342:	df 93       	push	r29
 344:	ec 01       	movw	r28, r24
	while (*str)
 346:	98 81       	ld	r25, Y
 348:	99 23       	and	r25, r25
 34a:	41 f0       	breq	.+16     	; 0x35c <LCD_Puts+0x1c>
 34c:	21 96       	adiw	r28, 0x01	; 1
	{
		DATA = *str++;
 34e:	90 93 6c 03 	sts	0x036C, r25	; 0x80036c <DATA>
		LCD_Write_Data();
 352:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCD_Write_Data>
	}
}

void LCD_Puts(const char *str)	//Display a string on the LCD Module
{
	while (*str)
 356:	99 91       	ld	r25, Y+
 358:	91 11       	cpse	r25, r1
 35a:	f9 cf       	rjmp	.-14     	; 0x34e <LCD_Puts+0xe>
	{
		DATA = *str++;
		LCD_Write_Data();
	}
}
 35c:	df 91       	pop	r29
 35e:	cf 91       	pop	r28
 360:	08 95       	ret

00000362 <Banner>:


void Banner(void)				//Display Tiny OS Banner on Terminal
{
	UART_Puts(MS1);
 362:	8c e4       	ldi	r24, 0x4C	; 76
 364:	93 e0       	ldi	r25, 0x03	; 3
 366:	0e 94 8f 01 	call	0x31e	; 0x31e <UART_Puts>
	UART_Puts(MS2);
 36a:	85 e1       	ldi	r24, 0x15	; 21
 36c:	93 e0       	ldi	r25, 0x03	; 3
 36e:	0e 94 8f 01 	call	0x31e	; 0x31e <UART_Puts>
	UART_Puts(MS4);
 372:	80 ee       	ldi	r24, 0xE0	; 224
 374:	92 e0       	ldi	r25, 0x02	; 2
 376:	0e 94 8f 01 	call	0x31e	; 0x31e <UART_Puts>
 37a:	08 95       	ret

0000037c <HELP>:
}

void HELP(void)						//Display available Tiny OS Commands on Terminal
{
	UART_Puts(MS3);
 37c:	8a ee       	ldi	r24, 0xEA	; 234
 37e:	92 e0       	ldi	r25, 0x02	; 2
 380:	0e 94 8f 01 	call	0x31e	; 0x31e <UART_Puts>
 384:	08 95       	ret

00000386 <LCD>:
}



void LCD(void)						//Lite LCD demo
{
 386:	ff 92       	push	r15
 388:	0f 93       	push	r16
 38a:	1f 93       	push	r17
 38c:	cf 93       	push	r28
 38e:	df 93       	push	r29

	int FLAG = 0;
	int i = 0;

	LCD_Write_Command();
 390:	0e 94 c7 00 	call	0x18e	; 0x18e <LCD_Write_Command>
	DATA = 0x08;					//Student Comment Here
 394:	88 e0       	ldi	r24, 0x08	; 8
 396:	80 93 6c 03 	sts	0x036C, r24	; 0x80036c <DATA>
	LCD_Write_Command();
 39a:	0e 94 c7 00 	call	0x18e	; 0x18e <LCD_Write_Command>
	DATA = 0x02;					//Student Comment Here
 39e:	82 e0       	ldi	r24, 0x02	; 2
 3a0:	80 93 6c 03 	sts	0x036C, r24	; 0x80036c <DATA>
	LCD_Write_Command();
 3a4:	0e 94 c7 00 	call	0x18e	; 0x18e <LCD_Write_Command>
	DATA = 0x06;					//Student Comment Here
 3a8:	86 e0       	ldi	r24, 0x06	; 6
 3aa:	80 93 6c 03 	sts	0x036C, r24	; 0x80036c <DATA>
	LCD_Write_Command();
 3ae:	0e 94 c7 00 	call	0x18e	; 0x18e <LCD_Write_Command>
	DATA = 0x0f;					//Student Comment Here
 3b2:	8f e0       	ldi	r24, 0x0F	; 15
 3b4:	80 93 6c 03 	sts	0x036C, r24	; 0x80036c <DATA>
	LCD_Write_Command();
 3b8:	0e 94 c7 00 	call	0x18e	; 0x18e <LCD_Write_Command>
	LCD_Puts(output);
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	91 e0       	ldi	r25, 0x01	; 1
 3c0:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_Puts>
 3c4:	00 e1       	ldi	r16, 0x10	; 16
 3c6:	10 e0       	ldi	r17, 0x00	; 0

	for (i = 0; i < 16; i++){
		DATA = 0x1c;
 3c8:	0f 2e       	mov	r0, r31
 3ca:	fc e1       	ldi	r31, 0x1C	; 28
 3cc:	ff 2e       	mov	r15, r31
 3ce:	f0 2d       	mov	r31, r0
 3d0:	f0 92 6c 03 	sts	0x036C, r15	; 0x80036c <DATA>
 3d4:	c2 e3       	ldi	r28, 0x32	; 50
 3d6:	d0 e0       	ldi	r29, 0x00	; 0
		for (int j = 0; j < 50; j++)
		{
			LCD_Delay();
 3d8:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_Delay>
 3dc:	21 97       	sbiw	r28, 0x01	; 1
	LCD_Write_Command();
	LCD_Puts(output);

	for (i = 0; i < 16; i++){
		DATA = 0x1c;
		for (int j = 0; j < 50; j++)
 3de:	e1 f7       	brne	.-8      	; 0x3d8 <LCD+0x52>
		{
			LCD_Delay();
			
		}
		UART_Puts("test\r\n");
 3e0:	88 e4       	ldi	r24, 0x48	; 72
 3e2:	91 e0       	ldi	r25, 0x01	; 1
 3e4:	0e 94 8f 01 	call	0x31e	; 0x31e <UART_Puts>
		if (FLAG)
		{
			break;
		}
		LCD_Write_Command();
 3e8:	0e 94 c7 00 	call	0x18e	; 0x18e <LCD_Write_Command>
 3ec:	01 50       	subi	r16, 0x01	; 1
 3ee:	11 09       	sbc	r17, r1
	LCD_Write_Command();
	DATA = 0x0f;					//Student Comment Here
	LCD_Write_Command();
	LCD_Puts(output);

	for (i = 0; i < 16; i++){
 3f0:	79 f7       	brne	.-34     	; 0x3d0 <LCD+0x4a>
	Re-engineer this subroutine to have the LCD endlessly scroll a marquee sign of 
	your Team's name either vertically or horizontally. Any key press should stop
	the scrolling and return execution to the command line in Terminal. User must
	always be able to return to command line.
	*/
}
 3f2:	df 91       	pop	r29
 3f4:	cf 91       	pop	r28
 3f6:	1f 91       	pop	r17
 3f8:	0f 91       	pop	r16
 3fa:	ff 90       	pop	r15
 3fc:	08 95       	ret

000003fe <ADC>:

void ADC(void)						//Lite Demo of the Analog to Digital Converter
{
 3fe:	8f 92       	push	r8
 400:	9f 92       	push	r9
 402:	af 92       	push	r10
 404:	bf 92       	push	r11
 406:	cf 92       	push	r12
 408:	df 92       	push	r13
 40a:	ef 92       	push	r14
 40c:	ff 92       	push	r15
 40e:	0f 93       	push	r16
 410:	1f 93       	push	r17
 412:	cf 93       	push	r28
 414:	df 93       	push	r29
	double r, t;
	int rn = 10000;
	volts[0x2]='.';
 416:	c1 e7       	ldi	r28, 0x71	; 113
 418:	d3 e0       	ldi	r29, 0x03	; 3
 41a:	8e e2       	ldi	r24, 0x2E	; 46
 41c:	8a 83       	std	Y+2, r24	; 0x02
	volts[0x4]=' ';
 41e:	80 e2       	ldi	r24, 0x20	; 32
 420:	8c 83       	std	Y+4, r24	; 0x04
	volts[0x5]= 0;
 422:	1d 82       	std	Y+5, r1	; 0x05
	
	ADC_Get();
 424:	0e 94 21 01 	call	0x242	; 0x242 <ADC_Get>
	Acc = (((int)HADC)*0x100+(int)(LADC));
 428:	60 91 6d 03 	lds	r22, 0x036D	; 0x80036d <HADC>
 42c:	70 e0       	ldi	r23, 0x00	; 0
 42e:	76 2f       	mov	r23, r22
 430:	66 27       	eor	r22, r22
 432:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <LADC>
 436:	68 0f       	add	r22, r24
 438:	71 1d       	adc	r23, r1
 43a:	70 93 79 03 	sts	0x0379, r23	; 0x800379 <Acc+0x1>
 43e:	60 93 78 03 	sts	0x0378, r22	; 0x800378 <Acc>
	
	r = (10000.0 * Acc) / (1040.0 - Acc);
 442:	07 2e       	mov	r0, r23
 444:	00 0c       	add	r0, r0
 446:	88 0b       	sbc	r24, r24
 448:	99 0b       	sbc	r25, r25
 44a:	0e 94 92 05 	call	0xb24	; 0xb24 <__floatsisf>
 44e:	6b 01       	movw	r12, r22
 450:	7c 01       	movw	r14, r24
	
	t = (3950*298.15)/(298.15*log(r/rn) + 3950);
 452:	20 e0       	ldi	r18, 0x00	; 0
 454:	30 e4       	ldi	r19, 0x40	; 64
 456:	4c e1       	ldi	r20, 0x1C	; 28
 458:	56 e4       	ldi	r21, 0x46	; 70
 45a:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__mulsf3>
 45e:	4b 01       	movw	r8, r22
 460:	5c 01       	movw	r10, r24
 462:	a7 01       	movw	r20, r14
 464:	96 01       	movw	r18, r12
 466:	60 e0       	ldi	r22, 0x00	; 0
 468:	70 e0       	ldi	r23, 0x00	; 0
 46a:	82 e8       	ldi	r24, 0x82	; 130
 46c:	94 e4       	ldi	r25, 0x44	; 68
 46e:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <__subsf3>
 472:	9b 01       	movw	r18, r22
 474:	ac 01       	movw	r20, r24
 476:	c5 01       	movw	r24, r10
 478:	b4 01       	movw	r22, r8
 47a:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <__divsf3>
 47e:	20 e0       	ldi	r18, 0x00	; 0
 480:	30 e4       	ldi	r19, 0x40	; 64
 482:	4c e1       	ldi	r20, 0x1C	; 28
 484:	56 e4       	ldi	r21, 0x46	; 70
 486:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <__divsf3>
 48a:	0e 94 26 06 	call	0xc4c	; 0xc4c <log>
 48e:	23 e3       	ldi	r18, 0x33	; 51
 490:	33 e1       	ldi	r19, 0x13	; 19
 492:	45 e9       	ldi	r20, 0x95	; 149
 494:	53 e4       	ldi	r21, 0x43	; 67
 496:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__mulsf3>
 49a:	20 e0       	ldi	r18, 0x00	; 0
 49c:	30 ee       	ldi	r19, 0xE0	; 224
 49e:	46 e7       	ldi	r20, 0x76	; 118
 4a0:	55 e4       	ldi	r21, 0x45	; 69
 4a2:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <__addsf3>
 4a6:	9b 01       	movw	r18, r22
 4a8:	ac 01       	movw	r20, r24
 4aa:	64 ee       	ldi	r22, 0xE4	; 228
 4ac:	72 ec       	ldi	r23, 0xC2	; 194
 4ae:	8f e8       	ldi	r24, 0x8F	; 143
 4b0:	99 e4       	ldi	r25, 0x49	; 73
 4b2:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <__divsf3>
	
	t = t - 273.15;						//Convert to C from K
 4b6:	23 e3       	ldi	r18, 0x33	; 51
 4b8:	33 e9       	ldi	r19, 0x93	; 147
 4ba:	48 e8       	ldi	r20, 0x88	; 136
 4bc:	53 e4       	ldi	r21, 0x43	; 67
 4be:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <__subsf3>
	
	t = t*(9/5) + 32;					//Convert to F from C
 4c2:	20 e0       	ldi	r18, 0x00	; 0
 4c4:	30 e0       	ldi	r19, 0x00	; 0
 4c6:	40 e0       	ldi	r20, 0x00	; 0
 4c8:	52 e4       	ldi	r21, 0x42	; 66
 4ca:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <__addsf3>
 4ce:	6b 01       	movw	r12, r22
 4d0:	7c 01       	movw	r14, r24

    int i = t*10; 
 4d2:	20 e0       	ldi	r18, 0x00	; 0
 4d4:	30 e0       	ldi	r19, 0x00	; 0
 4d6:	40 e2       	ldi	r20, 0x20	; 32
 4d8:	51 e4       	ldi	r21, 0x41	; 65
 4da:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__mulsf3>
 4de:	0e 94 5a 05 	call	0xab4	; 0xab4 <__fixsfsi>
 4e2:	8b 01       	movw	r16, r22
	int j = t;
	volts[0x0] = i / 100 + 48;
 4e4:	cb 01       	movw	r24, r22
 4e6:	64 e6       	ldi	r22, 0x64	; 100
 4e8:	70 e0       	ldi	r23, 0x00	; 0
 4ea:	0e 94 10 07 	call	0xe20	; 0xe20 <__divmodhi4>
 4ee:	60 5d       	subi	r22, 0xD0	; 208
 4f0:	68 83       	st	Y, r22
	
	volts[0x1] = j % 10 + 48;
 4f2:	c7 01       	movw	r24, r14
 4f4:	b6 01       	movw	r22, r12
 4f6:	0e 94 5a 05 	call	0xab4	; 0xab4 <__fixsfsi>
 4fa:	2a e0       	ldi	r18, 0x0A	; 10
 4fc:	30 e0       	ldi	r19, 0x00	; 0
 4fe:	cb 01       	movw	r24, r22
 500:	b9 01       	movw	r22, r18
 502:	0e 94 10 07 	call	0xe20	; 0xe20 <__divmodhi4>
 506:	80 5d       	subi	r24, 0xD0	; 208
 508:	89 83       	std	Y+1, r24	; 0x01
	
	volts[0x3] = i % 10 + 48;
 50a:	c8 01       	movw	r24, r16
 50c:	b9 01       	movw	r22, r18
 50e:	0e 94 10 07 	call	0xe20	; 0xe20 <__divmodhi4>
 512:	80 5d       	subi	r24, 0xD0	; 208
 514:	8b 83       	std	Y+3, r24	; 0x03

	
	UART_Puts(volts);
 516:	ce 01       	movw	r24, r28
 518:	0e 94 8f 01 	call	0x31e	; 0x31e <UART_Puts>
	UART_Puts(MS7);
 51c:	8d eb       	ldi	r24, 0xBD	; 189
 51e:	92 e0       	ldi	r25, 0x02	; 2
 520:	0e 94 8f 01 	call	0x31e	; 0x31e <UART_Puts>
		The potentiometer simulates a thermistor, its varying resistance simulates the
		varying resistance of a thermistor as it is heated and cooled. See the thermistor
		equations in the lab 3 folder. User must always be able to return to command line.
	*/
	
}
 524:	df 91       	pop	r29
 526:	cf 91       	pop	r28
 528:	1f 91       	pop	r17
 52a:	0f 91       	pop	r16
 52c:	ff 90       	pop	r15
 52e:	ef 90       	pop	r14
 530:	df 90       	pop	r13
 532:	cf 90       	pop	r12
 534:	bf 90       	pop	r11
 536:	af 90       	pop	r10
 538:	9f 90       	pop	r9
 53a:	8f 90       	pop	r8
 53c:	08 95       	ret

0000053e <EEPROM>:

void EEPROM(void)
{
 53e:	cf 93       	push	r28
 540:	df 93       	push	r29
	UART_Puts("\r\nEEPROM Write and Read.");
 542:	8f e4       	ldi	r24, 0x4F	; 79
 544:	91 e0       	ldi	r25, 0x01	; 1
 546:	0e 94 8f 01 	call	0x31e	; 0x31e <UART_Puts>
	during run-time via the command line and the same byte of data can be read back and verified after the power to
	the Xplained Mini board has been cycled. Ask the user to enter a valid EEPROM address and an
	8-bit data value. Utilize the following two given Assembly based drivers to communicate with the EEPROM. You
	may modify the EEPROM drivers as needed. User must be able to always return to command line.
	*/
	UART_Puts("\r\ninput memory location in this format: 0x####\n\r");
 54a:	88 e6       	ldi	r24, 0x68	; 104
 54c:	91 e0       	ldi	r25, 0x01	; 1
 54e:	0e 94 8f 01 	call	0x31e	; 0x31e <UART_Puts>
	EEMEMORYR();
 552:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <EEMEMORYR>
	for (int i = 0; i < 6; i++)
 556:	c0 e0       	ldi	r28, 0x00	; 0
 558:	d0 e0       	ldi	r29, 0x00	; 0
	{
		ASCII = '\0';
 55a:	10 92 70 03 	sts	0x0370, r1	; 0x800370 <ASCII>
		while (ASCII == '\0')
		{
			UART_Get();
 55e:	0e 94 0f 01 	call	0x21e	; 0x21e <UART_Get>
	UART_Puts("\r\ninput memory location in this format: 0x####\n\r");
	EEMEMORYR();
	for (int i = 0; i < 6; i++)
	{
		ASCII = '\0';
		while (ASCII == '\0')
 562:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <ASCII>
 566:	88 23       	and	r24, r24
 568:	d1 f3       	breq	.-12     	; 0x55e <EEPROM+0x20>
		{
			UART_Get();
		}
		UART_Put();
 56a:	0e 94 18 01 	call	0x230	; 0x230 <UART_Put>
			if(i == 2)
 56e:	c2 30       	cpi	r28, 0x02	; 2
 570:	d1 05       	cpc	r29, r1
 572:	49 f4       	brne	.+18     	; 0x586 <EEPROM+0x48>
			{
				DATA = ASCII-48;
				DATA*=16;
 574:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <ASCII>
 578:	82 95       	swap	r24
 57a:	80 7f       	andi	r24, 0xF0	; 240
 57c:	80 93 6c 03 	sts	0x036C, r24	; 0x80036c <DATA>
				EEMEMORYH();
 580:	0e 94 4c 01 	call	0x298	; 0x298 <EEMEMORYH>
 584:	18 c0       	rjmp	.+48     	; 0x5b6 <EEPROM+0x78>
			}
			if (i == 3)
 586:	c3 30       	cpi	r28, 0x03	; 3
 588:	d1 05       	cpc	r29, r1
 58a:	41 f4       	brne	.+16     	; 0x59c <EEPROM+0x5e>
			{
				DATA = ASCII-48;
 58c:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <ASCII>
 590:	80 53       	subi	r24, 0x30	; 48
 592:	80 93 6c 03 	sts	0x036C, r24	; 0x80036c <DATA>
				EEMEMORYH();
 596:	0e 94 4c 01 	call	0x298	; 0x298 <EEMEMORYH>
 59a:	18 c0       	rjmp	.+48     	; 0x5cc <EEPROM+0x8e>
			}
				
			if (i == 4)
 59c:	c4 30       	cpi	r28, 0x04	; 4
 59e:	d1 05       	cpc	r29, r1
 5a0:	51 f4       	brne	.+20     	; 0x5b6 <EEPROM+0x78>
			{
				DATA = ASCII-48;
				DATA*=16;
 5a2:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <ASCII>
 5a6:	82 95       	swap	r24
 5a8:	80 7f       	andi	r24, 0xF0	; 240
 5aa:	80 93 6c 03 	sts	0x036C, r24	; 0x80036c <DATA>
				EEMEMORYL();
 5ae:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEMEMORYL>
	8-bit data value. Utilize the following two given Assembly based drivers to communicate with the EEPROM. You
	may modify the EEPROM drivers as needed. User must be able to always return to command line.
	*/
	UART_Puts("\r\ninput memory location in this format: 0x####\n\r");
	EEMEMORYR();
	for (int i = 0; i < 6; i++)
 5b2:	21 96       	adiw	r28, 0x01	; 1
 5b4:	d2 cf       	rjmp	.-92     	; 0x55a <EEPROM+0x1c>
			{
				DATA = ASCII-48;
				DATA*=16;
				EEMEMORYL();
			}
			if (i == 5)
 5b6:	c5 30       	cpi	r28, 0x05	; 5
 5b8:	d1 05       	cpc	r29, r1
 5ba:	41 f4       	brne	.+16     	; 0x5cc <EEPROM+0x8e>
			{
				DATA = ASCII-48;
 5bc:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <ASCII>
 5c0:	80 53       	subi	r24, 0x30	; 48
 5c2:	80 93 6c 03 	sts	0x036C, r24	; 0x80036c <DATA>
				EEMEMORYL();
 5c6:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEMEMORYL>
 5ca:	04 c0       	rjmp	.+8      	; 0x5d4 <EEPROM+0x96>
	8-bit data value. Utilize the following two given Assembly based drivers to communicate with the EEPROM. You
	may modify the EEPROM drivers as needed. User must be able to always return to command line.
	*/
	UART_Puts("\r\ninput memory location in this format: 0x####\n\r");
	EEMEMORYR();
	for (int i = 0; i < 6; i++)
 5cc:	21 96       	adiw	r28, 0x01	; 1
 5ce:	c6 30       	cpi	r28, 0x06	; 6
 5d0:	d1 05       	cpc	r29, r1
 5d2:	19 f6       	brne	.-122    	; 0x55a <EEPROM+0x1c>
				DATA = ASCII-48;
				EEMEMORYL();
			}
			
	}
	UART_Puts("\r\n");
 5d4:	8f eb       	ldi	r24, 0xBF	; 191
 5d6:	91 e0       	ldi	r25, 0x01	; 1
 5d8:	0e 94 8f 01 	call	0x31e	; 0x31e <UART_Puts>
	EEPROM_Write();
 5dc:	0e 94 31 01 	call	0x262	; 0x262 <EEPROM_Write>
	UART_Puts("\r\n");
 5e0:	8f eb       	ldi	r24, 0xBF	; 191
 5e2:	91 e0       	ldi	r25, 0x01	; 1
 5e4:	0e 94 8f 01 	call	0x31e	; 0x31e <UART_Puts>
	EEPROM_Read();
 5e8:	0e 94 3e 01 	call	0x27c	; 0x27c <EEPROM_Read>
	UART_Put();
 5ec:	0e 94 18 01 	call	0x230	; 0x230 <UART_Put>
	UART_Puts("\r\n");
 5f0:	8f eb       	ldi	r24, 0xBF	; 191
 5f2:	91 e0       	ldi	r25, 0x01	; 1
 5f4:	0e 94 8f 01 	call	0x31e	; 0x31e <UART_Puts>
}
 5f8:	df 91       	pop	r29
 5fa:	cf 91       	pop	r28
 5fc:	08 95       	ret

000005fe <BAUD>:

void BAUD(void)
{
	UART_Puts("\r\nBaud rater\n(1)9600\r\n(2)2400\r\n(3)1200\r\n");
 5fe:	89 e9       	ldi	r24, 0x99	; 153
 600:	91 e0       	ldi	r25, 0x01	; 1
 602:	0e 94 8f 01 	call	0x31e	; 0x31e <UART_Puts>
	ASCII = '\0';
 606:	10 92 70 03 	sts	0x0370, r1	; 0x800370 <ASCII>
	while (ASCII == '\0')
	{
		UART_Get();
 60a:	0e 94 0f 01 	call	0x21e	; 0x21e <UART_Get>

void BAUD(void)
{
	UART_Puts("\r\nBaud rater\n(1)9600\r\n(2)2400\r\n(3)1200\r\n");
	ASCII = '\0';
	while (ASCII == '\0')
 60e:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <ASCII>
 612:	88 23       	and	r24, r24
 614:	d1 f3       	breq	.-12     	; 0x60a <BAUD+0xc>
	{
		UART_Get();
	}
	switch (ASCII)
 616:	82 33       	cpi	r24, 0x32	; 50
 618:	89 f0       	breq	.+34     	; 0x63c <BAUD+0x3e>
 61a:	83 33       	cpi	r24, 0x33	; 51
 61c:	f1 f0       	breq	.+60     	; 0x65a <BAUD+0x5c>
 61e:	81 33       	cpi	r24, 0x31	; 49
 620:	59 f5       	brne	.+86     	; 0x678 <BAUD+0x7a>
	{
		case '1':
		BAUDH = 0;
 622:	10 92 6f 03 	sts	0x036F, r1	; 0x80036f <BAUDH+0x1>
 626:	10 92 6e 03 	sts	0x036E, r1	; 0x80036e <BAUDH>
		BAUDL = 103;
 62a:	87 e6       	ldi	r24, 0x67	; 103
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	90 93 7b 03 	sts	0x037B, r25	; 0x80037b <BAUDL+0x1>
 632:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <BAUDL>
		SETBAUD();
 636:	0e 94 86 01 	call	0x30c	; 0x30c <SETBAUD>
		break;
 63a:	08 95       	ret
		case '2':
		BAUDH = 1;
 63c:	81 e0       	ldi	r24, 0x01	; 1
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	90 93 6f 03 	sts	0x036F, r25	; 0x80036f <BAUDH+0x1>
 644:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <BAUDH>
		BAUDL = 159;
 648:	8f e9       	ldi	r24, 0x9F	; 159
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	90 93 7b 03 	sts	0x037B, r25	; 0x80037b <BAUDL+0x1>
 650:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <BAUDL>
		SETBAUD();
 654:	0e 94 86 01 	call	0x30c	; 0x30c <SETBAUD>
		break;
 658:	08 95       	ret
		case '3':
		BAUDH = 3;
 65a:	83 e0       	ldi	r24, 0x03	; 3
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	90 93 6f 03 	sts	0x036F, r25	; 0x80036f <BAUDH+0x1>
 662:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <BAUDH>
		BAUDL = 63;
 666:	8f e3       	ldi	r24, 0x3F	; 63
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	90 93 7b 03 	sts	0x037B, r25	; 0x80037b <BAUDL+0x1>
 66e:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <BAUDL>
		SETBAUD();
 672:	0e 94 86 01 	call	0x30c	; 0x30c <SETBAUD>
		break;
 676:	08 95       	ret
		default:
		UART_Puts("\r\nIncorrect input\r\n");
 678:	82 ec       	ldi	r24, 0xC2	; 194
 67a:	91 e0       	ldi	r25, 0x01	; 1
 67c:	0e 94 8f 01 	call	0x31e	; 0x31e <UART_Puts>
 680:	08 95       	ret

00000682 <DATAb>:
	}

}

void DATAb(void)
{
 682:	cf 93       	push	r28
 684:	df 93       	push	r29
	UART_Puts("\r\n# of Data Bits\r\n(1)5-bits\r\n(2)6-bits\r\n(3)7-bits\r\n(4)8-bits\r\n(5)9-bits\r\n");
 686:	86 ed       	ldi	r24, 0xD6	; 214
 688:	91 e0       	ldi	r25, 0x01	; 1
 68a:	0e 94 8f 01 	call	0x31e	; 0x31e <UART_Puts>
	ASCII = '\0';
 68e:	10 92 70 03 	sts	0x0370, r1	; 0x800370 <ASCII>
	while (ASCII == '\0')
	{
		UART_Get();
 692:	0e 94 0f 01 	call	0x21e	; 0x21e <UART_Get>

void DATAb(void)
{
	UART_Puts("\r\n# of Data Bits\r\n(1)5-bits\r\n(2)6-bits\r\n(3)7-bits\r\n(4)8-bits\r\n(5)9-bits\r\n");
	ASCII = '\0';
	while (ASCII == '\0')
 696:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <ASCII>
 69a:	88 23       	and	r24, r24
 69c:	d1 f3       	breq	.-12     	; 0x692 <DATAb+0x10>
	{
		UART_Get();
	}
	switch (ASCII)
 69e:	83 33       	cpi	r24, 0x33	; 51
 6a0:	a9 f1       	breq	.+106    	; 0x70c <DATAb+0x8a>
 6a2:	28 f4       	brcc	.+10     	; 0x6ae <DATAb+0x2c>
 6a4:	81 33       	cpi	r24, 0x31	; 49
 6a6:	51 f0       	breq	.+20     	; 0x6bc <DATAb+0x3a>
 6a8:	82 33       	cpi	r24, 0x32	; 50
 6aa:	c9 f0       	breq	.+50     	; 0x6de <DATAb+0x5c>
 6ac:	68 c0       	rjmp	.+208    	; 0x77e <DATAb+0xfc>
 6ae:	84 33       	cpi	r24, 0x34	; 52
 6b0:	09 f4       	brne	.+2      	; 0x6b4 <DATAb+0x32>
 6b2:	43 c0       	rjmp	.+134    	; 0x73a <DATAb+0xb8>
 6b4:	85 33       	cpi	r24, 0x35	; 53
 6b6:	09 f4       	brne	.+2      	; 0x6ba <DATAb+0x38>
 6b8:	51 c0       	rjmp	.+162    	; 0x75c <DATAb+0xda>
 6ba:	61 c0       	rjmp	.+194    	; 0x77e <DATAb+0xfc>
	{
		case '1':
		USARTDATA = 6;
 6bc:	86 e0       	ldi	r24, 0x06	; 6
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	90 93 6b 03 	sts	0x036B, r25	; 0x80036b <__data_end+0x1>
 6c4:	80 93 6a 03 	sts	0x036A, r24	; 0x80036a <__data_end>
		CLEARC();
 6c8:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <CLEARC>
		USARTDATA = 4;
 6cc:	84 e0       	ldi	r24, 0x04	; 4
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	90 93 6b 03 	sts	0x036B, r25	; 0x80036b <__data_end+0x1>
 6d4:	80 93 6a 03 	sts	0x036A, r24	; 0x80036a <__data_end>
		CLEARB();
 6d8:	0e 94 7e 01 	call	0x2fc	; 0x2fc <CLEARB>
		break;
 6dc:	54 c0       	rjmp	.+168    	; 0x786 <DATAb+0x104>
		case '2':
		USARTDATA = 4;
 6de:	c4 e0       	ldi	r28, 0x04	; 4
 6e0:	d0 e0       	ldi	r29, 0x00	; 0
 6e2:	d0 93 6b 03 	sts	0x036B, r29	; 0x80036b <__data_end+0x1>
 6e6:	c0 93 6a 03 	sts	0x036A, r28	; 0x80036a <__data_end>
		CLEARC();
 6ea:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <CLEARC>
		USARTDATA = 2;
 6ee:	82 e0       	ldi	r24, 0x02	; 2
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	90 93 6b 03 	sts	0x036B, r25	; 0x80036b <__data_end+0x1>
 6f6:	80 93 6a 03 	sts	0x036A, r24	; 0x80036a <__data_end>
		SETC();
 6fa:	0e 94 62 01 	call	0x2c4	; 0x2c4 <SETC>
		USARTDATA = 4;
 6fe:	d0 93 6b 03 	sts	0x036B, r29	; 0x80036b <__data_end+0x1>
 702:	c0 93 6a 03 	sts	0x036A, r28	; 0x80036a <__data_end>
		CLEARB();
 706:	0e 94 7e 01 	call	0x2fc	; 0x2fc <CLEARB>
		break;
 70a:	3d c0       	rjmp	.+122    	; 0x786 <DATAb+0x104>
		case '3':
		USARTDATA = 4;
 70c:	c4 e0       	ldi	r28, 0x04	; 4
 70e:	d0 e0       	ldi	r29, 0x00	; 0
 710:	d0 93 6b 03 	sts	0x036B, r29	; 0x80036b <__data_end+0x1>
 714:	c0 93 6a 03 	sts	0x036A, r28	; 0x80036a <__data_end>
		SETC();
 718:	0e 94 62 01 	call	0x2c4	; 0x2c4 <SETC>
		USARTDATA = 2;
 71c:	82 e0       	ldi	r24, 0x02	; 2
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	90 93 6b 03 	sts	0x036B, r25	; 0x80036b <__data_end+0x1>
 724:	80 93 6a 03 	sts	0x036A, r24	; 0x80036a <__data_end>
		CLEARC();
 728:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <CLEARC>
		USARTDATA = 4;
 72c:	d0 93 6b 03 	sts	0x036B, r29	; 0x80036b <__data_end+0x1>
 730:	c0 93 6a 03 	sts	0x036A, r28	; 0x80036a <__data_end>
		CLEARB();
 734:	0e 94 7e 01 	call	0x2fc	; 0x2fc <CLEARB>
		break;
 738:	26 c0       	rjmp	.+76     	; 0x786 <DATAb+0x104>
		case '4':
		USARTDATA = 6;
 73a:	86 e0       	ldi	r24, 0x06	; 6
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	90 93 6b 03 	sts	0x036B, r25	; 0x80036b <__data_end+0x1>
 742:	80 93 6a 03 	sts	0x036A, r24	; 0x80036a <__data_end>
		SETC();
 746:	0e 94 62 01 	call	0x2c4	; 0x2c4 <SETC>
		USARTDATA = 4;
 74a:	84 e0       	ldi	r24, 0x04	; 4
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	90 93 6b 03 	sts	0x036B, r25	; 0x80036b <__data_end+0x1>
 752:	80 93 6a 03 	sts	0x036A, r24	; 0x80036a <__data_end>
		CLEARB();
 756:	0e 94 7e 01 	call	0x2fc	; 0x2fc <CLEARB>
		break;
 75a:	15 c0       	rjmp	.+42     	; 0x786 <DATAb+0x104>
		case '5':
		USARTDATA = 6;
 75c:	86 e0       	ldi	r24, 0x06	; 6
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	90 93 6b 03 	sts	0x036B, r25	; 0x80036b <__data_end+0x1>
 764:	80 93 6a 03 	sts	0x036A, r24	; 0x80036a <__data_end>
		SETC();
 768:	0e 94 62 01 	call	0x2c4	; 0x2c4 <SETC>
		USARTDATA = 4;
 76c:	84 e0       	ldi	r24, 0x04	; 4
 76e:	90 e0       	ldi	r25, 0x00	; 0
 770:	90 93 6b 03 	sts	0x036B, r25	; 0x80036b <__data_end+0x1>
 774:	80 93 6a 03 	sts	0x036A, r24	; 0x80036a <__data_end>
		SETB();
 778:	0e 94 74 01 	call	0x2e8	; 0x2e8 <SETB>
		break;
 77c:	04 c0       	rjmp	.+8      	; 0x786 <DATAb+0x104>
		default:
		UART_Puts("\r\nIncorrect input\r\n");
 77e:	82 ec       	ldi	r24, 0xC2	; 194
 780:	91 e0       	ldi	r25, 0x01	; 1
 782:	0e 94 8f 01 	call	0x31e	; 0x31e <UART_Puts>
		break;
	}
}
 786:	df 91       	pop	r29
 788:	cf 91       	pop	r28
 78a:	08 95       	ret

0000078c <PARITY>:

void PARITY(void)
{
	UART_Puts("\r\nParity\r\n(1)even\r\n(2)odd\r\n(3)none\r\n");
 78c:	80 e2       	ldi	r24, 0x20	; 32
 78e:	92 e0       	ldi	r25, 0x02	; 2
 790:	0e 94 8f 01 	call	0x31e	; 0x31e <UART_Puts>
	ASCII = '\0';
 794:	10 92 70 03 	sts	0x0370, r1	; 0x800370 <ASCII>
	while (ASCII == '\0')
	{
		UART_Get();
 798:	0e 94 0f 01 	call	0x21e	; 0x21e <UART_Get>

void PARITY(void)
{
	UART_Puts("\r\nParity\r\n(1)even\r\n(2)odd\r\n(3)none\r\n");
	ASCII = '\0';
	while (ASCII == '\0')
 79c:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <ASCII>
 7a0:	88 23       	and	r24, r24
 7a2:	d1 f3       	breq	.-12     	; 0x798 <PARITY+0xc>
	{
		UART_Get();
	}
	switch (ASCII)
 7a4:	82 33       	cpi	r24, 0x32	; 50
 7a6:	69 f0       	breq	.+26     	; 0x7c2 <PARITY+0x36>
 7a8:	83 33       	cpi	r24, 0x33	; 51
 7aa:	e1 f0       	breq	.+56     	; 0x7e4 <PARITY+0x58>
 7ac:	81 33       	cpi	r24, 0x31	; 49
 7ae:	19 f5       	brne	.+70     	; 0x7f6 <PARITY+0x6a>
	{
		case '1':
		USARTDATA = 48;
 7b0:	80 e3       	ldi	r24, 0x30	; 48
 7b2:	90 e0       	ldi	r25, 0x00	; 0
 7b4:	90 93 6b 03 	sts	0x036B, r25	; 0x80036b <__data_end+0x1>
 7b8:	80 93 6a 03 	sts	0x036A, r24	; 0x80036a <__data_end>
		CLEARC();
 7bc:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <CLEARC>
		break;
 7c0:	08 95       	ret
		case '2':
		USARTDATA = 32;
 7c2:	80 e2       	ldi	r24, 0x20	; 32
 7c4:	90 e0       	ldi	r25, 0x00	; 0
 7c6:	90 93 6b 03 	sts	0x036B, r25	; 0x80036b <__data_end+0x1>
 7ca:	80 93 6a 03 	sts	0x036A, r24	; 0x80036a <__data_end>
		SETC();
 7ce:	0e 94 62 01 	call	0x2c4	; 0x2c4 <SETC>
		USARTDATA = 16;
 7d2:	80 e1       	ldi	r24, 0x10	; 16
 7d4:	90 e0       	ldi	r25, 0x00	; 0
 7d6:	90 93 6b 03 	sts	0x036B, r25	; 0x80036b <__data_end+0x1>
 7da:	80 93 6a 03 	sts	0x036A, r24	; 0x80036a <__data_end>
		CLEARC();
 7de:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <CLEARC>
		break;
 7e2:	08 95       	ret
		case '3':
		USARTDATA = 48;
 7e4:	80 e3       	ldi	r24, 0x30	; 48
 7e6:	90 e0       	ldi	r25, 0x00	; 0
 7e8:	90 93 6b 03 	sts	0x036B, r25	; 0x80036b <__data_end+0x1>
 7ec:	80 93 6a 03 	sts	0x036A, r24	; 0x80036a <__data_end>
		SETC();
 7f0:	0e 94 62 01 	call	0x2c4	; 0x2c4 <SETC>
		break;
 7f4:	08 95       	ret
		default:
		UART_Puts("\r\nIncorrect input\r\n");
 7f6:	82 ec       	ldi	r24, 0xC2	; 194
 7f8:	91 e0       	ldi	r25, 0x01	; 1
 7fa:	0e 94 8f 01 	call	0x31e	; 0x31e <UART_Puts>
 7fe:	08 95       	ret

00000800 <STOPb>:
	}
}

void STOPb(void)
{
	USARTDATA = 8;
 800:	88 e0       	ldi	r24, 0x08	; 8
 802:	90 e0       	ldi	r25, 0x00	; 0
 804:	90 93 6b 03 	sts	0x036B, r25	; 0x80036b <__data_end+0x1>
 808:	80 93 6a 03 	sts	0x036A, r24	; 0x80036a <__data_end>
	UART_Puts("\r\n# of Stop bits\r\n(1)1-bit\r\n(2)2-bits\r\n");
 80c:	85 e4       	ldi	r24, 0x45	; 69
 80e:	92 e0       	ldi	r25, 0x02	; 2
 810:	0e 94 8f 01 	call	0x31e	; 0x31e <UART_Puts>
	ASCII = '\0';
 814:	10 92 70 03 	sts	0x0370, r1	; 0x800370 <ASCII>
	while (ASCII == '\0')
	{
		UART_Get();
 818:	0e 94 0f 01 	call	0x21e	; 0x21e <UART_Get>
void STOPb(void)
{
	USARTDATA = 8;
	UART_Puts("\r\n# of Stop bits\r\n(1)1-bit\r\n(2)2-bits\r\n");
	ASCII = '\0';
	while (ASCII == '\0')
 81c:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <ASCII>
 820:	88 23       	and	r24, r24
 822:	d1 f3       	breq	.-12     	; 0x818 <STOPb+0x18>
	{
		UART_Get();
	}
	switch (ASCII)
 824:	81 33       	cpi	r24, 0x31	; 49
 826:	19 f0       	breq	.+6      	; 0x82e <STOPb+0x2e>
 828:	82 33       	cpi	r24, 0x32	; 50
 82a:	21 f0       	breq	.+8      	; 0x834 <STOPb+0x34>
 82c:	06 c0       	rjmp	.+12     	; 0x83a <STOPb+0x3a>
	{
		case '1': CLEARC();
 82e:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <CLEARC>
		break;
 832:	08 95       	ret
		case '2': SETC();
 834:	0e 94 62 01 	call	0x2c4	; 0x2c4 <SETC>
		break;
 838:	08 95       	ret
		default:
		UART_Puts("\r\nIncorrect input\r\n");
 83a:	82 ec       	ldi	r24, 0xC2	; 194
 83c:	91 e0       	ldi	r25, 0x01	; 1
 83e:	0e 94 8f 01 	call	0x31e	; 0x31e <UART_Puts>
 842:	08 95       	ret

00000844 <USART>:
	}
}

void USART(void)
{
	UART_Puts("\r\nUSART Config\r\n(1)Baud Rate\r\n(2)# of Data bits\r\n(3)Parity\r\n(4)# of Stop Bits\r\n");
 844:	8d e6       	ldi	r24, 0x6D	; 109
 846:	92 e0       	ldi	r25, 0x02	; 2
 848:	0e 94 8f 01 	call	0x31e	; 0x31e <UART_Puts>
	ASCII = '\0';
 84c:	10 92 70 03 	sts	0x0370, r1	; 0x800370 <ASCII>
	while (ASCII == '\0')
	{
		UART_Get();
 850:	0e 94 0f 01 	call	0x21e	; 0x21e <UART_Get>

void USART(void)
{
	UART_Puts("\r\nUSART Config\r\n(1)Baud Rate\r\n(2)# of Data bits\r\n(3)Parity\r\n(4)# of Stop Bits\r\n");
	ASCII = '\0';
	while (ASCII == '\0')
 854:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <ASCII>
 858:	88 23       	and	r24, r24
 85a:	d1 f3       	breq	.-12     	; 0x850 <USART+0xc>
	{
		UART_Get();
	}
	switch (ASCII)
 85c:	82 33       	cpi	r24, 0x32	; 50
 85e:	61 f0       	breq	.+24     	; 0x878 <USART+0x34>
 860:	18 f4       	brcc	.+6      	; 0x868 <USART+0x24>
 862:	81 33       	cpi	r24, 0x31	; 49
 864:	31 f0       	breq	.+12     	; 0x872 <USART+0x2e>
 866:	11 c0       	rjmp	.+34     	; 0x88a <USART+0x46>
 868:	83 33       	cpi	r24, 0x33	; 51
 86a:	49 f0       	breq	.+18     	; 0x87e <USART+0x3a>
 86c:	84 33       	cpi	r24, 0x34	; 52
 86e:	51 f0       	breq	.+20     	; 0x884 <USART+0x40>
 870:	0c c0       	rjmp	.+24     	; 0x88a <USART+0x46>
	{
		case '1': BAUD();
 872:	0e 94 ff 02 	call	0x5fe	; 0x5fe <BAUD>
		break;
 876:	08 95       	ret
		case '2': DATAb();
 878:	0e 94 41 03 	call	0x682	; 0x682 <DATAb>
		break;
 87c:	08 95       	ret
		case '3': PARITY();
 87e:	0e 94 c6 03 	call	0x78c	; 0x78c <PARITY>
		break;
 882:	08 95       	ret
		case '4': STOPb();
 884:	0e 94 00 04 	call	0x800	; 0x800 <STOPb>
		break;
 888:	08 95       	ret
		default:
		UART_Puts("\r\nIncorrect input\r\n");
 88a:	82 ec       	ldi	r24, 0xC2	; 194
 88c:	91 e0       	ldi	r25, 0x01	; 1
 88e:	0e 94 8f 01 	call	0x31e	; 0x31e <UART_Puts>
 892:	08 95       	ret

00000894 <Command>:
	}
}

void Command(void)					//command interpreter
{
	UART_Puts(MS3);
 894:	8a ee       	ldi	r24, 0xEA	; 234
 896:	92 e0       	ldi	r25, 0x02	; 2
 898:	0e 94 8f 01 	call	0x31e	; 0x31e <UART_Puts>
	ASCII = '\0';						
 89c:	10 92 70 03 	sts	0x0370, r1	; 0x800370 <ASCII>
	while (ASCII == '\0')
	{
		UART_Get();
 8a0:	0e 94 0f 01 	call	0x21e	; 0x21e <UART_Get>

void Command(void)					//command interpreter
{
	UART_Puts(MS3);
	ASCII = '\0';						
	while (ASCII == '\0')
 8a4:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <ASCII>
 8a8:	88 23       	and	r24, r24
 8aa:	d1 f3       	breq	.-12     	; 0x8a0 <Command+0xc>
	{
		UART_Get();
	}
	switch (ASCII)
 8ac:	85 36       	cpi	r24, 0x65	; 101
 8ae:	79 f0       	breq	.+30     	; 0x8ce <Command+0x3a>
 8b0:	18 f4       	brcc	.+6      	; 0x8b8 <Command+0x24>
 8b2:	81 36       	cpi	r24, 0x61	; 97
 8b4:	49 f0       	breq	.+18     	; 0x8c8 <Command+0x34>
 8b6:	11 c0       	rjmp	.+34     	; 0x8da <Command+0x46>
 8b8:	8c 36       	cpi	r24, 0x6C	; 108
 8ba:	19 f0       	breq	.+6      	; 0x8c2 <Command+0x2e>
 8bc:	85 37       	cpi	r24, 0x75	; 117
 8be:	51 f0       	breq	.+20     	; 0x8d4 <Command+0x40>
 8c0:	0c c0       	rjmp	.+24     	; 0x8da <Command+0x46>
	{
		case 'L' | 'l': LCD();
 8c2:	0e 94 c3 01 	call	0x386	; 0x386 <LCD>
		break;
 8c6:	08 95       	ret
		case 'A' | 'a': ADC();
 8c8:	0e 94 ff 01 	call	0x3fe	; 0x3fe <ADC>
		break;
 8cc:	08 95       	ret
		case 'E' | 'e': EEPROM();
 8ce:	0e 94 9f 02 	call	0x53e	; 0x53e <EEPROM>
		break;
 8d2:	08 95       	ret
		case 'U' | 'u': USART();
 8d4:	0e 94 22 04 	call	0x844	; 0x844 <USART>
		break;
 8d8:	08 95       	ret
		default:
		UART_Puts(MS5);
 8da:	81 ec       	ldi	r24, 0xC1	; 193
 8dc:	92 e0       	ldi	r25, 0x02	; 2
 8de:	0e 94 8f 01 	call	0x31e	; 0x31e <UART_Puts>
		HELP();
 8e2:	0e 94 be 01 	call	0x37c	; 0x37c <HELP>
 8e6:	08 95       	ret

000008e8 <main>:
	}
}

int main(void)
{
	Mega328P_Init();
 8e8:	0e 94 a6 00 	call	0x14c	; 0x14c <Mega328P_Init>
	Banner();
 8ec:	0e 94 b1 01 	call	0x362	; 0x362 <Banner>
	while (1)
	{
		Command();				//infinite command loop
 8f0:	0e 94 4a 04 	call	0x894	; 0x894 <Command>
 8f4:	fd cf       	rjmp	.-6      	; 0x8f0 <main+0x8>

000008f6 <__subsf3>:
 8f6:	50 58       	subi	r21, 0x80	; 128

000008f8 <__addsf3>:
 8f8:	bb 27       	eor	r27, r27
 8fa:	aa 27       	eor	r26, r26
 8fc:	0e 94 93 04 	call	0x926	; 0x926 <__addsf3x>
 900:	0c 94 e4 05 	jmp	0xbc8	; 0xbc8 <__fp_round>
 904:	0e 94 d6 05 	call	0xbac	; 0xbac <__fp_pscA>
 908:	38 f0       	brcs	.+14     	; 0x918 <__stack+0x19>
 90a:	0e 94 dd 05 	call	0xbba	; 0xbba <__fp_pscB>
 90e:	20 f0       	brcs	.+8      	; 0x918 <__stack+0x19>
 910:	39 f4       	brne	.+14     	; 0x920 <__stack+0x21>
 912:	9f 3f       	cpi	r25, 0xFF	; 255
 914:	19 f4       	brne	.+6      	; 0x91c <__stack+0x1d>
 916:	26 f4       	brtc	.+8      	; 0x920 <__stack+0x21>
 918:	0c 94 d3 05 	jmp	0xba6	; 0xba6 <__fp_nan>
 91c:	0e f4       	brtc	.+2      	; 0x920 <__stack+0x21>
 91e:	e0 95       	com	r30
 920:	e7 fb       	bst	r30, 7
 922:	0c 94 cd 05 	jmp	0xb9a	; 0xb9a <__fp_inf>

00000926 <__addsf3x>:
 926:	e9 2f       	mov	r30, r25
 928:	0e 94 f5 05 	call	0xbea	; 0xbea <__fp_split3>
 92c:	58 f3       	brcs	.-42     	; 0x904 <__stack+0x5>
 92e:	ba 17       	cp	r27, r26
 930:	62 07       	cpc	r22, r18
 932:	73 07       	cpc	r23, r19
 934:	84 07       	cpc	r24, r20
 936:	95 07       	cpc	r25, r21
 938:	20 f0       	brcs	.+8      	; 0x942 <__addsf3x+0x1c>
 93a:	79 f4       	brne	.+30     	; 0x95a <__addsf3x+0x34>
 93c:	a6 f5       	brtc	.+104    	; 0x9a6 <__addsf3x+0x80>
 93e:	0c 94 17 06 	jmp	0xc2e	; 0xc2e <__fp_zero>
 942:	0e f4       	brtc	.+2      	; 0x946 <__addsf3x+0x20>
 944:	e0 95       	com	r30
 946:	0b 2e       	mov	r0, r27
 948:	ba 2f       	mov	r27, r26
 94a:	a0 2d       	mov	r26, r0
 94c:	0b 01       	movw	r0, r22
 94e:	b9 01       	movw	r22, r18
 950:	90 01       	movw	r18, r0
 952:	0c 01       	movw	r0, r24
 954:	ca 01       	movw	r24, r20
 956:	a0 01       	movw	r20, r0
 958:	11 24       	eor	r1, r1
 95a:	ff 27       	eor	r31, r31
 95c:	59 1b       	sub	r21, r25
 95e:	99 f0       	breq	.+38     	; 0x986 <__addsf3x+0x60>
 960:	59 3f       	cpi	r21, 0xF9	; 249
 962:	50 f4       	brcc	.+20     	; 0x978 <__addsf3x+0x52>
 964:	50 3e       	cpi	r21, 0xE0	; 224
 966:	68 f1       	brcs	.+90     	; 0x9c2 <__addsf3x+0x9c>
 968:	1a 16       	cp	r1, r26
 96a:	f0 40       	sbci	r31, 0x00	; 0
 96c:	a2 2f       	mov	r26, r18
 96e:	23 2f       	mov	r18, r19
 970:	34 2f       	mov	r19, r20
 972:	44 27       	eor	r20, r20
 974:	58 5f       	subi	r21, 0xF8	; 248
 976:	f3 cf       	rjmp	.-26     	; 0x95e <__addsf3x+0x38>
 978:	46 95       	lsr	r20
 97a:	37 95       	ror	r19
 97c:	27 95       	ror	r18
 97e:	a7 95       	ror	r26
 980:	f0 40       	sbci	r31, 0x00	; 0
 982:	53 95       	inc	r21
 984:	c9 f7       	brne	.-14     	; 0x978 <__addsf3x+0x52>
 986:	7e f4       	brtc	.+30     	; 0x9a6 <__addsf3x+0x80>
 988:	1f 16       	cp	r1, r31
 98a:	ba 0b       	sbc	r27, r26
 98c:	62 0b       	sbc	r22, r18
 98e:	73 0b       	sbc	r23, r19
 990:	84 0b       	sbc	r24, r20
 992:	ba f0       	brmi	.+46     	; 0x9c2 <__addsf3x+0x9c>
 994:	91 50       	subi	r25, 0x01	; 1
 996:	a1 f0       	breq	.+40     	; 0x9c0 <__addsf3x+0x9a>
 998:	ff 0f       	add	r31, r31
 99a:	bb 1f       	adc	r27, r27
 99c:	66 1f       	adc	r22, r22
 99e:	77 1f       	adc	r23, r23
 9a0:	88 1f       	adc	r24, r24
 9a2:	c2 f7       	brpl	.-16     	; 0x994 <__addsf3x+0x6e>
 9a4:	0e c0       	rjmp	.+28     	; 0x9c2 <__addsf3x+0x9c>
 9a6:	ba 0f       	add	r27, r26
 9a8:	62 1f       	adc	r22, r18
 9aa:	73 1f       	adc	r23, r19
 9ac:	84 1f       	adc	r24, r20
 9ae:	48 f4       	brcc	.+18     	; 0x9c2 <__addsf3x+0x9c>
 9b0:	87 95       	ror	r24
 9b2:	77 95       	ror	r23
 9b4:	67 95       	ror	r22
 9b6:	b7 95       	ror	r27
 9b8:	f7 95       	ror	r31
 9ba:	9e 3f       	cpi	r25, 0xFE	; 254
 9bc:	08 f0       	brcs	.+2      	; 0x9c0 <__addsf3x+0x9a>
 9be:	b0 cf       	rjmp	.-160    	; 0x920 <__stack+0x21>
 9c0:	93 95       	inc	r25
 9c2:	88 0f       	add	r24, r24
 9c4:	08 f0       	brcs	.+2      	; 0x9c8 <__addsf3x+0xa2>
 9c6:	99 27       	eor	r25, r25
 9c8:	ee 0f       	add	r30, r30
 9ca:	97 95       	ror	r25
 9cc:	87 95       	ror	r24
 9ce:	08 95       	ret

000009d0 <__divsf3>:
 9d0:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__divsf3x>
 9d4:	0c 94 e4 05 	jmp	0xbc8	; 0xbc8 <__fp_round>
 9d8:	0e 94 dd 05 	call	0xbba	; 0xbba <__fp_pscB>
 9dc:	58 f0       	brcs	.+22     	; 0x9f4 <__divsf3+0x24>
 9de:	0e 94 d6 05 	call	0xbac	; 0xbac <__fp_pscA>
 9e2:	40 f0       	brcs	.+16     	; 0x9f4 <__divsf3+0x24>
 9e4:	29 f4       	brne	.+10     	; 0x9f0 <__divsf3+0x20>
 9e6:	5f 3f       	cpi	r21, 0xFF	; 255
 9e8:	29 f0       	breq	.+10     	; 0x9f4 <__divsf3+0x24>
 9ea:	0c 94 cd 05 	jmp	0xb9a	; 0xb9a <__fp_inf>
 9ee:	51 11       	cpse	r21, r1
 9f0:	0c 94 18 06 	jmp	0xc30	; 0xc30 <__fp_szero>
 9f4:	0c 94 d3 05 	jmp	0xba6	; 0xba6 <__fp_nan>

000009f8 <__divsf3x>:
 9f8:	0e 94 f5 05 	call	0xbea	; 0xbea <__fp_split3>
 9fc:	68 f3       	brcs	.-38     	; 0x9d8 <__divsf3+0x8>

000009fe <__divsf3_pse>:
 9fe:	99 23       	and	r25, r25
 a00:	b1 f3       	breq	.-20     	; 0x9ee <__divsf3+0x1e>
 a02:	55 23       	and	r21, r21
 a04:	91 f3       	breq	.-28     	; 0x9ea <__divsf3+0x1a>
 a06:	95 1b       	sub	r25, r21
 a08:	55 0b       	sbc	r21, r21
 a0a:	bb 27       	eor	r27, r27
 a0c:	aa 27       	eor	r26, r26
 a0e:	62 17       	cp	r22, r18
 a10:	73 07       	cpc	r23, r19
 a12:	84 07       	cpc	r24, r20
 a14:	38 f0       	brcs	.+14     	; 0xa24 <__divsf3_pse+0x26>
 a16:	9f 5f       	subi	r25, 0xFF	; 255
 a18:	5f 4f       	sbci	r21, 0xFF	; 255
 a1a:	22 0f       	add	r18, r18
 a1c:	33 1f       	adc	r19, r19
 a1e:	44 1f       	adc	r20, r20
 a20:	aa 1f       	adc	r26, r26
 a22:	a9 f3       	breq	.-22     	; 0xa0e <__divsf3_pse+0x10>
 a24:	35 d0       	rcall	.+106    	; 0xa90 <__divsf3_pse+0x92>
 a26:	0e 2e       	mov	r0, r30
 a28:	3a f0       	brmi	.+14     	; 0xa38 <__divsf3_pse+0x3a>
 a2a:	e0 e8       	ldi	r30, 0x80	; 128
 a2c:	32 d0       	rcall	.+100    	; 0xa92 <__divsf3_pse+0x94>
 a2e:	91 50       	subi	r25, 0x01	; 1
 a30:	50 40       	sbci	r21, 0x00	; 0
 a32:	e6 95       	lsr	r30
 a34:	00 1c       	adc	r0, r0
 a36:	ca f7       	brpl	.-14     	; 0xa2a <__divsf3_pse+0x2c>
 a38:	2b d0       	rcall	.+86     	; 0xa90 <__divsf3_pse+0x92>
 a3a:	fe 2f       	mov	r31, r30
 a3c:	29 d0       	rcall	.+82     	; 0xa90 <__divsf3_pse+0x92>
 a3e:	66 0f       	add	r22, r22
 a40:	77 1f       	adc	r23, r23
 a42:	88 1f       	adc	r24, r24
 a44:	bb 1f       	adc	r27, r27
 a46:	26 17       	cp	r18, r22
 a48:	37 07       	cpc	r19, r23
 a4a:	48 07       	cpc	r20, r24
 a4c:	ab 07       	cpc	r26, r27
 a4e:	b0 e8       	ldi	r27, 0x80	; 128
 a50:	09 f0       	breq	.+2      	; 0xa54 <__divsf3_pse+0x56>
 a52:	bb 0b       	sbc	r27, r27
 a54:	80 2d       	mov	r24, r0
 a56:	bf 01       	movw	r22, r30
 a58:	ff 27       	eor	r31, r31
 a5a:	93 58       	subi	r25, 0x83	; 131
 a5c:	5f 4f       	sbci	r21, 0xFF	; 255
 a5e:	3a f0       	brmi	.+14     	; 0xa6e <__divsf3_pse+0x70>
 a60:	9e 3f       	cpi	r25, 0xFE	; 254
 a62:	51 05       	cpc	r21, r1
 a64:	78 f0       	brcs	.+30     	; 0xa84 <__divsf3_pse+0x86>
 a66:	0c 94 cd 05 	jmp	0xb9a	; 0xb9a <__fp_inf>
 a6a:	0c 94 18 06 	jmp	0xc30	; 0xc30 <__fp_szero>
 a6e:	5f 3f       	cpi	r21, 0xFF	; 255
 a70:	e4 f3       	brlt	.-8      	; 0xa6a <__divsf3_pse+0x6c>
 a72:	98 3e       	cpi	r25, 0xE8	; 232
 a74:	d4 f3       	brlt	.-12     	; 0xa6a <__divsf3_pse+0x6c>
 a76:	86 95       	lsr	r24
 a78:	77 95       	ror	r23
 a7a:	67 95       	ror	r22
 a7c:	b7 95       	ror	r27
 a7e:	f7 95       	ror	r31
 a80:	9f 5f       	subi	r25, 0xFF	; 255
 a82:	c9 f7       	brne	.-14     	; 0xa76 <__divsf3_pse+0x78>
 a84:	88 0f       	add	r24, r24
 a86:	91 1d       	adc	r25, r1
 a88:	96 95       	lsr	r25
 a8a:	87 95       	ror	r24
 a8c:	97 f9       	bld	r25, 7
 a8e:	08 95       	ret
 a90:	e1 e0       	ldi	r30, 0x01	; 1
 a92:	66 0f       	add	r22, r22
 a94:	77 1f       	adc	r23, r23
 a96:	88 1f       	adc	r24, r24
 a98:	bb 1f       	adc	r27, r27
 a9a:	62 17       	cp	r22, r18
 a9c:	73 07       	cpc	r23, r19
 a9e:	84 07       	cpc	r24, r20
 aa0:	ba 07       	cpc	r27, r26
 aa2:	20 f0       	brcs	.+8      	; 0xaac <__divsf3_pse+0xae>
 aa4:	62 1b       	sub	r22, r18
 aa6:	73 0b       	sbc	r23, r19
 aa8:	84 0b       	sbc	r24, r20
 aaa:	ba 0b       	sbc	r27, r26
 aac:	ee 1f       	adc	r30, r30
 aae:	88 f7       	brcc	.-30     	; 0xa92 <__divsf3_pse+0x94>
 ab0:	e0 95       	com	r30
 ab2:	08 95       	ret

00000ab4 <__fixsfsi>:
 ab4:	0e 94 61 05 	call	0xac2	; 0xac2 <__fixunssfsi>
 ab8:	68 94       	set
 aba:	b1 11       	cpse	r27, r1
 abc:	0c 94 18 06 	jmp	0xc30	; 0xc30 <__fp_szero>
 ac0:	08 95       	ret

00000ac2 <__fixunssfsi>:
 ac2:	0e 94 fd 05 	call	0xbfa	; 0xbfa <__fp_splitA>
 ac6:	88 f0       	brcs	.+34     	; 0xaea <__fixunssfsi+0x28>
 ac8:	9f 57       	subi	r25, 0x7F	; 127
 aca:	98 f0       	brcs	.+38     	; 0xaf2 <__fixunssfsi+0x30>
 acc:	b9 2f       	mov	r27, r25
 ace:	99 27       	eor	r25, r25
 ad0:	b7 51       	subi	r27, 0x17	; 23
 ad2:	b0 f0       	brcs	.+44     	; 0xb00 <__fixunssfsi+0x3e>
 ad4:	e1 f0       	breq	.+56     	; 0xb0e <__fixunssfsi+0x4c>
 ad6:	66 0f       	add	r22, r22
 ad8:	77 1f       	adc	r23, r23
 ada:	88 1f       	adc	r24, r24
 adc:	99 1f       	adc	r25, r25
 ade:	1a f0       	brmi	.+6      	; 0xae6 <__fixunssfsi+0x24>
 ae0:	ba 95       	dec	r27
 ae2:	c9 f7       	brne	.-14     	; 0xad6 <__fixunssfsi+0x14>
 ae4:	14 c0       	rjmp	.+40     	; 0xb0e <__fixunssfsi+0x4c>
 ae6:	b1 30       	cpi	r27, 0x01	; 1
 ae8:	91 f0       	breq	.+36     	; 0xb0e <__fixunssfsi+0x4c>
 aea:	0e 94 17 06 	call	0xc2e	; 0xc2e <__fp_zero>
 aee:	b1 e0       	ldi	r27, 0x01	; 1
 af0:	08 95       	ret
 af2:	0c 94 17 06 	jmp	0xc2e	; 0xc2e <__fp_zero>
 af6:	67 2f       	mov	r22, r23
 af8:	78 2f       	mov	r23, r24
 afa:	88 27       	eor	r24, r24
 afc:	b8 5f       	subi	r27, 0xF8	; 248
 afe:	39 f0       	breq	.+14     	; 0xb0e <__fixunssfsi+0x4c>
 b00:	b9 3f       	cpi	r27, 0xF9	; 249
 b02:	cc f3       	brlt	.-14     	; 0xaf6 <__fixunssfsi+0x34>
 b04:	86 95       	lsr	r24
 b06:	77 95       	ror	r23
 b08:	67 95       	ror	r22
 b0a:	b3 95       	inc	r27
 b0c:	d9 f7       	brne	.-10     	; 0xb04 <__fixunssfsi+0x42>
 b0e:	3e f4       	brtc	.+14     	; 0xb1e <__fixunssfsi+0x5c>
 b10:	90 95       	com	r25
 b12:	80 95       	com	r24
 b14:	70 95       	com	r23
 b16:	61 95       	neg	r22
 b18:	7f 4f       	sbci	r23, 0xFF	; 255
 b1a:	8f 4f       	sbci	r24, 0xFF	; 255
 b1c:	9f 4f       	sbci	r25, 0xFF	; 255
 b1e:	08 95       	ret

00000b20 <__floatunsisf>:
 b20:	e8 94       	clt
 b22:	09 c0       	rjmp	.+18     	; 0xb36 <__floatsisf+0x12>

00000b24 <__floatsisf>:
 b24:	97 fb       	bst	r25, 7
 b26:	3e f4       	brtc	.+14     	; 0xb36 <__floatsisf+0x12>
 b28:	90 95       	com	r25
 b2a:	80 95       	com	r24
 b2c:	70 95       	com	r23
 b2e:	61 95       	neg	r22
 b30:	7f 4f       	sbci	r23, 0xFF	; 255
 b32:	8f 4f       	sbci	r24, 0xFF	; 255
 b34:	9f 4f       	sbci	r25, 0xFF	; 255
 b36:	99 23       	and	r25, r25
 b38:	a9 f0       	breq	.+42     	; 0xb64 <__floatsisf+0x40>
 b3a:	f9 2f       	mov	r31, r25
 b3c:	96 e9       	ldi	r25, 0x96	; 150
 b3e:	bb 27       	eor	r27, r27
 b40:	93 95       	inc	r25
 b42:	f6 95       	lsr	r31
 b44:	87 95       	ror	r24
 b46:	77 95       	ror	r23
 b48:	67 95       	ror	r22
 b4a:	b7 95       	ror	r27
 b4c:	f1 11       	cpse	r31, r1
 b4e:	f8 cf       	rjmp	.-16     	; 0xb40 <__floatsisf+0x1c>
 b50:	fa f4       	brpl	.+62     	; 0xb90 <__floatsisf+0x6c>
 b52:	bb 0f       	add	r27, r27
 b54:	11 f4       	brne	.+4      	; 0xb5a <__floatsisf+0x36>
 b56:	60 ff       	sbrs	r22, 0
 b58:	1b c0       	rjmp	.+54     	; 0xb90 <__floatsisf+0x6c>
 b5a:	6f 5f       	subi	r22, 0xFF	; 255
 b5c:	7f 4f       	sbci	r23, 0xFF	; 255
 b5e:	8f 4f       	sbci	r24, 0xFF	; 255
 b60:	9f 4f       	sbci	r25, 0xFF	; 255
 b62:	16 c0       	rjmp	.+44     	; 0xb90 <__floatsisf+0x6c>
 b64:	88 23       	and	r24, r24
 b66:	11 f0       	breq	.+4      	; 0xb6c <__floatsisf+0x48>
 b68:	96 e9       	ldi	r25, 0x96	; 150
 b6a:	11 c0       	rjmp	.+34     	; 0xb8e <__floatsisf+0x6a>
 b6c:	77 23       	and	r23, r23
 b6e:	21 f0       	breq	.+8      	; 0xb78 <__floatsisf+0x54>
 b70:	9e e8       	ldi	r25, 0x8E	; 142
 b72:	87 2f       	mov	r24, r23
 b74:	76 2f       	mov	r23, r22
 b76:	05 c0       	rjmp	.+10     	; 0xb82 <__floatsisf+0x5e>
 b78:	66 23       	and	r22, r22
 b7a:	71 f0       	breq	.+28     	; 0xb98 <__floatsisf+0x74>
 b7c:	96 e8       	ldi	r25, 0x86	; 134
 b7e:	86 2f       	mov	r24, r22
 b80:	70 e0       	ldi	r23, 0x00	; 0
 b82:	60 e0       	ldi	r22, 0x00	; 0
 b84:	2a f0       	brmi	.+10     	; 0xb90 <__floatsisf+0x6c>
 b86:	9a 95       	dec	r25
 b88:	66 0f       	add	r22, r22
 b8a:	77 1f       	adc	r23, r23
 b8c:	88 1f       	adc	r24, r24
 b8e:	da f7       	brpl	.-10     	; 0xb86 <__floatsisf+0x62>
 b90:	88 0f       	add	r24, r24
 b92:	96 95       	lsr	r25
 b94:	87 95       	ror	r24
 b96:	97 f9       	bld	r25, 7
 b98:	08 95       	ret

00000b9a <__fp_inf>:
 b9a:	97 f9       	bld	r25, 7
 b9c:	9f 67       	ori	r25, 0x7F	; 127
 b9e:	80 e8       	ldi	r24, 0x80	; 128
 ba0:	70 e0       	ldi	r23, 0x00	; 0
 ba2:	60 e0       	ldi	r22, 0x00	; 0
 ba4:	08 95       	ret

00000ba6 <__fp_nan>:
 ba6:	9f ef       	ldi	r25, 0xFF	; 255
 ba8:	80 ec       	ldi	r24, 0xC0	; 192
 baa:	08 95       	ret

00000bac <__fp_pscA>:
 bac:	00 24       	eor	r0, r0
 bae:	0a 94       	dec	r0
 bb0:	16 16       	cp	r1, r22
 bb2:	17 06       	cpc	r1, r23
 bb4:	18 06       	cpc	r1, r24
 bb6:	09 06       	cpc	r0, r25
 bb8:	08 95       	ret

00000bba <__fp_pscB>:
 bba:	00 24       	eor	r0, r0
 bbc:	0a 94       	dec	r0
 bbe:	12 16       	cp	r1, r18
 bc0:	13 06       	cpc	r1, r19
 bc2:	14 06       	cpc	r1, r20
 bc4:	05 06       	cpc	r0, r21
 bc6:	08 95       	ret

00000bc8 <__fp_round>:
 bc8:	09 2e       	mov	r0, r25
 bca:	03 94       	inc	r0
 bcc:	00 0c       	add	r0, r0
 bce:	11 f4       	brne	.+4      	; 0xbd4 <__fp_round+0xc>
 bd0:	88 23       	and	r24, r24
 bd2:	52 f0       	brmi	.+20     	; 0xbe8 <__fp_round+0x20>
 bd4:	bb 0f       	add	r27, r27
 bd6:	40 f4       	brcc	.+16     	; 0xbe8 <__fp_round+0x20>
 bd8:	bf 2b       	or	r27, r31
 bda:	11 f4       	brne	.+4      	; 0xbe0 <__fp_round+0x18>
 bdc:	60 ff       	sbrs	r22, 0
 bde:	04 c0       	rjmp	.+8      	; 0xbe8 <__fp_round+0x20>
 be0:	6f 5f       	subi	r22, 0xFF	; 255
 be2:	7f 4f       	sbci	r23, 0xFF	; 255
 be4:	8f 4f       	sbci	r24, 0xFF	; 255
 be6:	9f 4f       	sbci	r25, 0xFF	; 255
 be8:	08 95       	ret

00000bea <__fp_split3>:
 bea:	57 fd       	sbrc	r21, 7
 bec:	90 58       	subi	r25, 0x80	; 128
 bee:	44 0f       	add	r20, r20
 bf0:	55 1f       	adc	r21, r21
 bf2:	59 f0       	breq	.+22     	; 0xc0a <__fp_splitA+0x10>
 bf4:	5f 3f       	cpi	r21, 0xFF	; 255
 bf6:	71 f0       	breq	.+28     	; 0xc14 <__fp_splitA+0x1a>
 bf8:	47 95       	ror	r20

00000bfa <__fp_splitA>:
 bfa:	88 0f       	add	r24, r24
 bfc:	97 fb       	bst	r25, 7
 bfe:	99 1f       	adc	r25, r25
 c00:	61 f0       	breq	.+24     	; 0xc1a <__fp_splitA+0x20>
 c02:	9f 3f       	cpi	r25, 0xFF	; 255
 c04:	79 f0       	breq	.+30     	; 0xc24 <__fp_splitA+0x2a>
 c06:	87 95       	ror	r24
 c08:	08 95       	ret
 c0a:	12 16       	cp	r1, r18
 c0c:	13 06       	cpc	r1, r19
 c0e:	14 06       	cpc	r1, r20
 c10:	55 1f       	adc	r21, r21
 c12:	f2 cf       	rjmp	.-28     	; 0xbf8 <__fp_split3+0xe>
 c14:	46 95       	lsr	r20
 c16:	f1 df       	rcall	.-30     	; 0xbfa <__fp_splitA>
 c18:	08 c0       	rjmp	.+16     	; 0xc2a <__fp_splitA+0x30>
 c1a:	16 16       	cp	r1, r22
 c1c:	17 06       	cpc	r1, r23
 c1e:	18 06       	cpc	r1, r24
 c20:	99 1f       	adc	r25, r25
 c22:	f1 cf       	rjmp	.-30     	; 0xc06 <__fp_splitA+0xc>
 c24:	86 95       	lsr	r24
 c26:	71 05       	cpc	r23, r1
 c28:	61 05       	cpc	r22, r1
 c2a:	08 94       	sec
 c2c:	08 95       	ret

00000c2e <__fp_zero>:
 c2e:	e8 94       	clt

00000c30 <__fp_szero>:
 c30:	bb 27       	eor	r27, r27
 c32:	66 27       	eor	r22, r22
 c34:	77 27       	eor	r23, r23
 c36:	cb 01       	movw	r24, r22
 c38:	97 f9       	bld	r25, 7
 c3a:	08 95       	ret
 c3c:	16 f0       	brts	.+4      	; 0xc42 <__fp_szero+0x12>
 c3e:	0c 94 db 06 	jmp	0xdb6	; 0xdb6 <__fp_mpack>
 c42:	0c 94 d3 05 	jmp	0xba6	; 0xba6 <__fp_nan>
 c46:	68 94       	set
 c48:	0c 94 cd 05 	jmp	0xb9a	; 0xb9a <__fp_inf>

00000c4c <log>:
 c4c:	0e 94 fd 05 	call	0xbfa	; 0xbfa <__fp_splitA>
 c50:	a8 f3       	brcs	.-22     	; 0xc3c <__fp_szero+0xc>
 c52:	99 23       	and	r25, r25
 c54:	c1 f3       	breq	.-16     	; 0xc46 <__fp_szero+0x16>
 c56:	ae f3       	brts	.-22     	; 0xc42 <__fp_szero+0x12>
 c58:	df 93       	push	r29
 c5a:	cf 93       	push	r28
 c5c:	1f 93       	push	r17
 c5e:	0f 93       	push	r16
 c60:	ff 92       	push	r15
 c62:	c9 2f       	mov	r28, r25
 c64:	dd 27       	eor	r29, r29
 c66:	88 23       	and	r24, r24
 c68:	2a f0       	brmi	.+10     	; 0xc74 <log+0x28>
 c6a:	21 97       	sbiw	r28, 0x01	; 1
 c6c:	66 0f       	add	r22, r22
 c6e:	77 1f       	adc	r23, r23
 c70:	88 1f       	adc	r24, r24
 c72:	da f7       	brpl	.-10     	; 0xc6a <log+0x1e>
 c74:	20 e0       	ldi	r18, 0x00	; 0
 c76:	30 e0       	ldi	r19, 0x00	; 0
 c78:	40 e8       	ldi	r20, 0x80	; 128
 c7a:	5f eb       	ldi	r21, 0xBF	; 191
 c7c:	9f e3       	ldi	r25, 0x3F	; 63
 c7e:	88 39       	cpi	r24, 0x98	; 152
 c80:	20 f0       	brcs	.+8      	; 0xc8a <log+0x3e>
 c82:	80 3e       	cpi	r24, 0xE0	; 224
 c84:	38 f0       	brcs	.+14     	; 0xc94 <log+0x48>
 c86:	21 96       	adiw	r28, 0x01	; 1
 c88:	8f 77       	andi	r24, 0x7F	; 127
 c8a:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <__addsf3>
 c8e:	e4 eb       	ldi	r30, 0xB4	; 180
 c90:	f0 e0       	ldi	r31, 0x00	; 0
 c92:	04 c0       	rjmp	.+8      	; 0xc9c <log+0x50>
 c94:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <__addsf3>
 c98:	e1 ee       	ldi	r30, 0xE1	; 225
 c9a:	f0 e0       	ldi	r31, 0x00	; 0
 c9c:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <__fp_powser>
 ca0:	8b 01       	movw	r16, r22
 ca2:	be 01       	movw	r22, r28
 ca4:	ec 01       	movw	r28, r24
 ca6:	fb 2e       	mov	r15, r27
 ca8:	6f 57       	subi	r22, 0x7F	; 127
 caa:	71 09       	sbc	r23, r1
 cac:	75 95       	asr	r23
 cae:	77 1f       	adc	r23, r23
 cb0:	88 0b       	sbc	r24, r24
 cb2:	99 0b       	sbc	r25, r25
 cb4:	0e 94 92 05 	call	0xb24	; 0xb24 <__floatsisf>
 cb8:	28 e1       	ldi	r18, 0x18	; 24
 cba:	32 e7       	ldi	r19, 0x72	; 114
 cbc:	41 e3       	ldi	r20, 0x31	; 49
 cbe:	5f e3       	ldi	r21, 0x3F	; 63
 cc0:	0e 94 81 06 	call	0xd02	; 0xd02 <__mulsf3x>
 cc4:	af 2d       	mov	r26, r15
 cc6:	98 01       	movw	r18, r16
 cc8:	ae 01       	movw	r20, r28
 cca:	ff 90       	pop	r15
 ccc:	0f 91       	pop	r16
 cce:	1f 91       	pop	r17
 cd0:	cf 91       	pop	r28
 cd2:	df 91       	pop	r29
 cd4:	0e 94 93 04 	call	0x926	; 0x926 <__addsf3x>
 cd8:	0c 94 e4 05 	jmp	0xbc8	; 0xbc8 <__fp_round>

00000cdc <__mulsf3>:
 cdc:	0e 94 81 06 	call	0xd02	; 0xd02 <__mulsf3x>
 ce0:	0c 94 e4 05 	jmp	0xbc8	; 0xbc8 <__fp_round>
 ce4:	0e 94 d6 05 	call	0xbac	; 0xbac <__fp_pscA>
 ce8:	38 f0       	brcs	.+14     	; 0xcf8 <__mulsf3+0x1c>
 cea:	0e 94 dd 05 	call	0xbba	; 0xbba <__fp_pscB>
 cee:	20 f0       	brcs	.+8      	; 0xcf8 <__mulsf3+0x1c>
 cf0:	95 23       	and	r25, r21
 cf2:	11 f0       	breq	.+4      	; 0xcf8 <__mulsf3+0x1c>
 cf4:	0c 94 cd 05 	jmp	0xb9a	; 0xb9a <__fp_inf>
 cf8:	0c 94 d3 05 	jmp	0xba6	; 0xba6 <__fp_nan>
 cfc:	11 24       	eor	r1, r1
 cfe:	0c 94 18 06 	jmp	0xc30	; 0xc30 <__fp_szero>

00000d02 <__mulsf3x>:
 d02:	0e 94 f5 05 	call	0xbea	; 0xbea <__fp_split3>
 d06:	70 f3       	brcs	.-36     	; 0xce4 <__mulsf3+0x8>

00000d08 <__mulsf3_pse>:
 d08:	95 9f       	mul	r25, r21
 d0a:	c1 f3       	breq	.-16     	; 0xcfc <__mulsf3+0x20>
 d0c:	95 0f       	add	r25, r21
 d0e:	50 e0       	ldi	r21, 0x00	; 0
 d10:	55 1f       	adc	r21, r21
 d12:	62 9f       	mul	r22, r18
 d14:	f0 01       	movw	r30, r0
 d16:	72 9f       	mul	r23, r18
 d18:	bb 27       	eor	r27, r27
 d1a:	f0 0d       	add	r31, r0
 d1c:	b1 1d       	adc	r27, r1
 d1e:	63 9f       	mul	r22, r19
 d20:	aa 27       	eor	r26, r26
 d22:	f0 0d       	add	r31, r0
 d24:	b1 1d       	adc	r27, r1
 d26:	aa 1f       	adc	r26, r26
 d28:	64 9f       	mul	r22, r20
 d2a:	66 27       	eor	r22, r22
 d2c:	b0 0d       	add	r27, r0
 d2e:	a1 1d       	adc	r26, r1
 d30:	66 1f       	adc	r22, r22
 d32:	82 9f       	mul	r24, r18
 d34:	22 27       	eor	r18, r18
 d36:	b0 0d       	add	r27, r0
 d38:	a1 1d       	adc	r26, r1
 d3a:	62 1f       	adc	r22, r18
 d3c:	73 9f       	mul	r23, r19
 d3e:	b0 0d       	add	r27, r0
 d40:	a1 1d       	adc	r26, r1
 d42:	62 1f       	adc	r22, r18
 d44:	83 9f       	mul	r24, r19
 d46:	a0 0d       	add	r26, r0
 d48:	61 1d       	adc	r22, r1
 d4a:	22 1f       	adc	r18, r18
 d4c:	74 9f       	mul	r23, r20
 d4e:	33 27       	eor	r19, r19
 d50:	a0 0d       	add	r26, r0
 d52:	61 1d       	adc	r22, r1
 d54:	23 1f       	adc	r18, r19
 d56:	84 9f       	mul	r24, r20
 d58:	60 0d       	add	r22, r0
 d5a:	21 1d       	adc	r18, r1
 d5c:	82 2f       	mov	r24, r18
 d5e:	76 2f       	mov	r23, r22
 d60:	6a 2f       	mov	r22, r26
 d62:	11 24       	eor	r1, r1
 d64:	9f 57       	subi	r25, 0x7F	; 127
 d66:	50 40       	sbci	r21, 0x00	; 0
 d68:	9a f0       	brmi	.+38     	; 0xd90 <__mulsf3_pse+0x88>
 d6a:	f1 f0       	breq	.+60     	; 0xda8 <__mulsf3_pse+0xa0>
 d6c:	88 23       	and	r24, r24
 d6e:	4a f0       	brmi	.+18     	; 0xd82 <__mulsf3_pse+0x7a>
 d70:	ee 0f       	add	r30, r30
 d72:	ff 1f       	adc	r31, r31
 d74:	bb 1f       	adc	r27, r27
 d76:	66 1f       	adc	r22, r22
 d78:	77 1f       	adc	r23, r23
 d7a:	88 1f       	adc	r24, r24
 d7c:	91 50       	subi	r25, 0x01	; 1
 d7e:	50 40       	sbci	r21, 0x00	; 0
 d80:	a9 f7       	brne	.-22     	; 0xd6c <__mulsf3_pse+0x64>
 d82:	9e 3f       	cpi	r25, 0xFE	; 254
 d84:	51 05       	cpc	r21, r1
 d86:	80 f0       	brcs	.+32     	; 0xda8 <__mulsf3_pse+0xa0>
 d88:	0c 94 cd 05 	jmp	0xb9a	; 0xb9a <__fp_inf>
 d8c:	0c 94 18 06 	jmp	0xc30	; 0xc30 <__fp_szero>
 d90:	5f 3f       	cpi	r21, 0xFF	; 255
 d92:	e4 f3       	brlt	.-8      	; 0xd8c <__mulsf3_pse+0x84>
 d94:	98 3e       	cpi	r25, 0xE8	; 232
 d96:	d4 f3       	brlt	.-12     	; 0xd8c <__mulsf3_pse+0x84>
 d98:	86 95       	lsr	r24
 d9a:	77 95       	ror	r23
 d9c:	67 95       	ror	r22
 d9e:	b7 95       	ror	r27
 da0:	f7 95       	ror	r31
 da2:	e7 95       	ror	r30
 da4:	9f 5f       	subi	r25, 0xFF	; 255
 da6:	c1 f7       	brne	.-16     	; 0xd98 <__mulsf3_pse+0x90>
 da8:	fe 2b       	or	r31, r30
 daa:	88 0f       	add	r24, r24
 dac:	91 1d       	adc	r25, r1
 dae:	96 95       	lsr	r25
 db0:	87 95       	ror	r24
 db2:	97 f9       	bld	r25, 7
 db4:	08 95       	ret

00000db6 <__fp_mpack>:
 db6:	9f 3f       	cpi	r25, 0xFF	; 255
 db8:	31 f0       	breq	.+12     	; 0xdc6 <__fp_mpack_finite+0xc>

00000dba <__fp_mpack_finite>:
 dba:	91 50       	subi	r25, 0x01	; 1
 dbc:	20 f4       	brcc	.+8      	; 0xdc6 <__fp_mpack_finite+0xc>
 dbe:	87 95       	ror	r24
 dc0:	77 95       	ror	r23
 dc2:	67 95       	ror	r22
 dc4:	b7 95       	ror	r27
 dc6:	88 0f       	add	r24, r24
 dc8:	91 1d       	adc	r25, r1
 dca:	96 95       	lsr	r25
 dcc:	87 95       	ror	r24
 dce:	97 f9       	bld	r25, 7
 dd0:	08 95       	ret

00000dd2 <__fp_powser>:
 dd2:	df 93       	push	r29
 dd4:	cf 93       	push	r28
 dd6:	1f 93       	push	r17
 dd8:	0f 93       	push	r16
 dda:	ff 92       	push	r15
 ddc:	ef 92       	push	r14
 dde:	df 92       	push	r13
 de0:	7b 01       	movw	r14, r22
 de2:	8c 01       	movw	r16, r24
 de4:	68 94       	set
 de6:	06 c0       	rjmp	.+12     	; 0xdf4 <__fp_powser+0x22>
 de8:	da 2e       	mov	r13, r26
 dea:	ef 01       	movw	r28, r30
 dec:	0e 94 81 06 	call	0xd02	; 0xd02 <__mulsf3x>
 df0:	fe 01       	movw	r30, r28
 df2:	e8 94       	clt
 df4:	a5 91       	lpm	r26, Z+
 df6:	25 91       	lpm	r18, Z+
 df8:	35 91       	lpm	r19, Z+
 dfa:	45 91       	lpm	r20, Z+
 dfc:	55 91       	lpm	r21, Z+
 dfe:	a6 f3       	brts	.-24     	; 0xde8 <__fp_powser+0x16>
 e00:	ef 01       	movw	r28, r30
 e02:	0e 94 93 04 	call	0x926	; 0x926 <__addsf3x>
 e06:	fe 01       	movw	r30, r28
 e08:	97 01       	movw	r18, r14
 e0a:	a8 01       	movw	r20, r16
 e0c:	da 94       	dec	r13
 e0e:	69 f7       	brne	.-38     	; 0xdea <__fp_powser+0x18>
 e10:	df 90       	pop	r13
 e12:	ef 90       	pop	r14
 e14:	ff 90       	pop	r15
 e16:	0f 91       	pop	r16
 e18:	1f 91       	pop	r17
 e1a:	cf 91       	pop	r28
 e1c:	df 91       	pop	r29
 e1e:	08 95       	ret

00000e20 <__divmodhi4>:
 e20:	97 fb       	bst	r25, 7
 e22:	07 2e       	mov	r0, r23
 e24:	16 f4       	brtc	.+4      	; 0xe2a <__divmodhi4+0xa>
 e26:	00 94       	com	r0
 e28:	07 d0       	rcall	.+14     	; 0xe38 <__divmodhi4_neg1>
 e2a:	77 fd       	sbrc	r23, 7
 e2c:	09 d0       	rcall	.+18     	; 0xe40 <__divmodhi4_neg2>
 e2e:	0e 94 24 07 	call	0xe48	; 0xe48 <__udivmodhi4>
 e32:	07 fc       	sbrc	r0, 7
 e34:	05 d0       	rcall	.+10     	; 0xe40 <__divmodhi4_neg2>
 e36:	3e f4       	brtc	.+14     	; 0xe46 <__divmodhi4_exit>

00000e38 <__divmodhi4_neg1>:
 e38:	90 95       	com	r25
 e3a:	81 95       	neg	r24
 e3c:	9f 4f       	sbci	r25, 0xFF	; 255
 e3e:	08 95       	ret

00000e40 <__divmodhi4_neg2>:
 e40:	70 95       	com	r23
 e42:	61 95       	neg	r22
 e44:	7f 4f       	sbci	r23, 0xFF	; 255

00000e46 <__divmodhi4_exit>:
 e46:	08 95       	ret

00000e48 <__udivmodhi4>:
 e48:	aa 1b       	sub	r26, r26
 e4a:	bb 1b       	sub	r27, r27
 e4c:	51 e1       	ldi	r21, 0x11	; 17
 e4e:	07 c0       	rjmp	.+14     	; 0xe5e <__udivmodhi4_ep>

00000e50 <__udivmodhi4_loop>:
 e50:	aa 1f       	adc	r26, r26
 e52:	bb 1f       	adc	r27, r27
 e54:	a6 17       	cp	r26, r22
 e56:	b7 07       	cpc	r27, r23
 e58:	10 f0       	brcs	.+4      	; 0xe5e <__udivmodhi4_ep>
 e5a:	a6 1b       	sub	r26, r22
 e5c:	b7 0b       	sbc	r27, r23

00000e5e <__udivmodhi4_ep>:
 e5e:	88 1f       	adc	r24, r24
 e60:	99 1f       	adc	r25, r25
 e62:	5a 95       	dec	r21
 e64:	a9 f7       	brne	.-22     	; 0xe50 <__udivmodhi4_loop>
 e66:	80 95       	com	r24
 e68:	90 95       	com	r25
 e6a:	bc 01       	movw	r22, r24
 e6c:	cd 01       	movw	r24, r26
 e6e:	08 95       	ret

00000e70 <_exit>:
 e70:	f8 94       	cli

00000e72 <__stop_program>:
 e72:	ff cf       	rjmp	.-2      	; 0xe72 <__stop_program>
